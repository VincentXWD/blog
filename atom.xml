<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kirai</title>
  
  <subtitle>我好菜啊 QAQ | I Good Vegetable A QAQ</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://vincentxwd.github.io/blog/"/>
  <updated>2018-08-21T04:22:33.135Z</updated>
  <id>https://vincentxwd.github.io/blog/</id>
  
  <author>
    <name>Kirai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HDOJ6425] Rikka with Badminton (组合数学)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/20/HDOJ6425-Rikka-with-Badminton/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/20/HDOJ6425-Rikka-with-Badminton/</id>
    <published>2018-08-20T14:01:21.000Z</published>
    <updated>2018-08-21T04:22:33.135Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6425" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6425</a></p><p><strong>$n$个人去打羽毛球，其中$a$个人没球没拍，$b$个人只有拍，$c$个人只有球，$d$个人什么都有。现在规定只要有两个人有拍，一个人有球就能去打。问有多少种组合不能去打。</strong></p><a id="more"></a><p>JLS给的解居然是个dp，惊了。</p><p>直接考虑有几种情况不能去打：球和拍都不够、球够拍不够、拍够球不够。</p><p>($a$个白嫖哥去不去都无所谓，因此他们对答案的整体贡献是$2^a$。)</p><p>球和拍都不够：分两种情况，完全没有拍和只有一个拍。第一种的贡献只有$a$出，第二种贡献从$a$和$b$里出。因此总体答案是$2^a+2^a×C_{b}^{1}$。</p><p>球够拍不够：这个贡献可以拆分成$a$和$c$、$a$和$b$、$a$和$b$和$d$里出。第一种（没有拍子）$c$类人随意去就可以（不能不去），贡献是$2^{a}×(2^{c}-1)$。第二种（只有一个拍子，$b$类人出拍子，$c$类人出球），贡献是$2^{a}×C_{b}^{1}×(2^c-1)$。第三种（只有一个拍子，$d$类人出拍子），贡献是$2^{a}×C_{d}^{1}×2^c$。</p><p>拍够球不够：只有$b$类人，且至少去$2$个，贡献是$2^a×C_{b}^{2}$。</p><p>全加起来就完事了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line">LL a, b, c, d;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = x * ret % mod;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    x = x * x % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d);</span><br><span class="line">    LL p1 = mul(<span class="number">2L</span>L, a) * (b + <span class="number">1</span>) % mod;</span><br><span class="line">    LL p2 = mul(<span class="number">2L</span>L, a) * (mul(<span class="number">2L</span>L, c) - <span class="number">1</span>) % mod;</span><br><span class="line">       p2 += ((mul(<span class="number">2L</span>L, a) * b % mod) * (mul(<span class="number">2L</span>L, c) - <span class="number">1</span>)) % mod; p2 %= mod;</span><br><span class="line">       p2 +=(( mul(<span class="number">2L</span>L, a) * d % mod) * mul(<span class="number">2L</span>L, c)) % mod; p2 %= mod;</span><br><span class="line">    LL p3 = (mul(<span class="number">2L</span>L, a) * (mul(<span class="number">2L</span>L, b) - b - <span class="number">1</span> + mod) % mod) % mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (((p1+p2)%mod)+p3)%mod);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6425&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6425&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;$n$个人去打羽毛球，其中$a$个人没球没拍，$b$个人只有拍，$c$个人只有球，$d$个人什么都有。现在规定只要有两个人有拍，一个人有球就能去打。问有多少种组合不能去打。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="组合" scheme="https://vincentxwd.github.io/blog/tags/%E7%BB%84%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6418] Rikka with Stone-Paper-Scissors (纳什均衡)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/20/HDOJ6418-Rikka-with-Stone-Paper-Scissors/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/20/HDOJ6418-Rikka-with-Stone-Paper-Scissors/</id>
    <published>2018-08-20T13:48:02.000Z</published>
    <updated>2018-08-20T14:03:02.805Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6418" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6418</a></p><p><strong>A和B玩剪子石头布，每个人要出$n$步，现在给你它们剪子、石头、布分别出的次数，每赢一次，获胜方得一分。已知A会随机出，现在求B的分数的最大期望。</strong></p><a id="more"></a><p>一共玩$n$局，每一次出不同的手势，得分的概率和对方守中对应手势的数目有关系，直接把能赢和能输的概率加加减减就OK。证明涉及纳什均衡，JLS直播讲的也没太听懂orz。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL a,b,c,a1,b1,c1;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;a1,&amp;b1,&amp;c1);</span><br><span class="line">    LL n = a + b + c;</span><br><span class="line">    LL m = -a*c1-b*a1-c*b1+a1*c+b1*a+c1*b;</span><br><span class="line">    <span class="keyword">if</span>(m % n == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, m / n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, m/__gcd((LL)<span class="built_in">abs</span>(m),n), n/__gcd((LL)<span class="built_in">abs</span>(m),n));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6418&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6418&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A和B玩剪子石头布，每个人要出$n$步，现在给你它们剪子、石头、布分别出的次数，每赢一次，获胜方得一分。已知A会随机出，现在求B的分数的最大期望。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="博弈" scheme="https://vincentxwd.github.io/blog/tags/%E5%8D%9A%E5%BC%88/"/>
    
      <category term="期望" scheme="https://vincentxwd.github.io/blog/tags/%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>[CF1025] Codeforces Round #504 (Div.1+Div.2)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/20/CF1025-Codeforces-Round-504-Div-1-Div-2/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/20/CF1025-Codeforces-Round-504-Div-1-Div-2/</id>
    <published>2018-08-20T05:16:51.000Z</published>
    <updated>2018-08-20T06:37:44.766Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1025" target="_blank" rel="noopener">http://codeforces.com/contest/1025</a></p><p><strong>这一场大家fst得都好惨啊。</strong></p><a id="more"></a><p>A：水题不多解释，注意$n=1$的时候输出Yes。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;n,s)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) vis[s[i]-<span class="string">'a'</span>]++;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(vis[i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B：<strong>有$n$个数对，让你找到一个大于1的数字，使得这个数字为这个$n$对数中任意一个数的因数。</strong></p><p>这个数一定是每一对数中某个数的因数，不妨建一个队列，把第一对中两个数的所有质因数去重后压到队里，看看队首的数是不是接下来的数对中任意一个数的因数。如果不是就出队，到最后看看有没有剩下数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">160600</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">  LL a, b;</span><br><span class="line">  <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">  <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; vis;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    vis.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;a,&amp;b);</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= a; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(a % j == <span class="number">0</span>) &#123;</span><br><span class="line">            q.push(j);</span><br><span class="line">            vis.insert(j);</span><br><span class="line">            <span class="keyword">while</span>(a % j == <span class="number">0</span>) a /= j;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        q.push(a);</span><br><span class="line">          vis.insert(a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= b; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(b % j == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(vis.find(j) == vis.end()) &#123;</span><br><span class="line">          vis.insert(j);</span><br><span class="line">            q.push(j);</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="keyword">while</span>(b % j == <span class="number">0</span>) b /= j;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(vis.find(b) == vis.end()) &#123;</span><br><span class="line">          vis.insert(b);</span><br><span class="line">        q.push(b);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">          <span class="keyword">if</span>(a % q.front() == <span class="number">0</span> || b % q.front() == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          q.pop();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!q.empty()) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, q.front());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C：<strong>给你一个只有b和w两种字符的串s，希望让你通过一个操作获得尽可能长的bw交替的子串。这个操作是选中某一个位置切分，让两边都翻转。</strong></p><p>考虑这个操作的本质，两头翻转以后，原本在串两端的字符接到了一起，中间的到了两端。再选一个位置也是这样，那么实际上两头是可以通过这个操作接到一起的。于是我们把整个串看成一个环，找最长的不超过字符串本身长度的bw串就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150500</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s)) &#123;</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      s[i+n] = s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> t, i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">2</span> * n) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">'b'</span>) &#123;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i + <span class="number">1</span> &lt; <span class="number">2</span> * n &amp;&amp; s[i+<span class="number">1</span>] != s[i]) &#123;</span><br><span class="line">          t++; i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = max(ret, t+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; <span class="number">2</span> * n) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">'w'</span>) &#123;</span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i + <span class="number">1</span> &lt; <span class="number">2</span> * n &amp;&amp; s[i+<span class="number">1</span>] != s[i]) &#123;</span><br><span class="line">          t++; i++;</span><br><span class="line">        &#125;</span><br><span class="line">        ret = max(ret, t+<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, min(n, ret));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D：<strong>给你n个数，问你能不能构成一棵二叉排序树，并且每2个相邻节点之间的gcd不是1。</strong></p><p>首先想到了暴力枚举每一层的根节点，但是这样复杂度是$O(n^{logn})$的，显然不科学。</p><p>注意到一个点作为根的时候与它和它的儿子具体是谁有关系，我们考虑区间dp，维护$dp(i,j,k)$，表示$[i,j]$区间内的第$k$个数字能否做根，这个关系可以用bitset维护。</p><p>于是我们枚举长度和起止端点，特判端点作为根的时候能否成立，区间里面的数则直接枚举位置，看看这个k是否能分别做左右两棵树的根，如果能的话，直接给大区间做标记。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">707</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in","r",stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">bitset</span>&lt;maxn&gt; ok[n+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">bitset</span>&lt;maxn&gt; dp[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a[i], a[j]) != <span class="number">1</span>) &#123;</span><br><span class="line">          ok[i][j] = ok[j][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) dp[i][i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= n; len++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + len - <span class="number">1</span> &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i + len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>((ok[i] &amp; dp[i+<span class="number">1</span>][j]).any()) &#123;</span><br><span class="line">          dp[i][j][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((ok[j] &amp; dp[i][j<span class="number">-1</span>]).any()) &#123;</span><br><span class="line">          dp[i][j][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(dp[i][k][k] &amp;&amp; dp[k][j][k]) &#123;</span><br><span class="line">            dp[i][j][k] = <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dp[<span class="number">1</span>][n]!=<span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1025&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这一场大家fst得都好惨啊。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ4017] 小Q的无敌异或（异或, 树状数组）</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/19/BZOJ4017-%E5%B0%8FQ%E7%9A%84%E6%97%A0%E6%95%8C%E5%BC%82%E6%88%96/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/19/BZOJ4017-小Q的无敌异或/</id>
    <published>2018-08-19T09:54:32.000Z</published>
    <updated>2018-08-19T17:25:41.493Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4017" target="_blank" rel="noopener">https://www.lydsy.com/JudgeOnline/problem.php?id=4017</a></p><p><strong>（这是一道好题）给你n个数，分别问这n个数中任意两个区间的异或和的加和是多少、任意两个区间的和的异或和是多少。</strong></p><a id="more"></a><p><strong>Task 1：求异或的和</strong></p><p>针对第一问，我们首先分析出两个性质：</p><ol><li><strong>设$[1,i]$的异或和为$xor[i]$，那么区间$[l,r]$内数字的异或和为$xor[l-1]⨁xor[r]$。</strong></li><li><strong>某个在数字第k位有贡献的子区间$[l,r]$，它们的前缀异或和$xor[l]$与$xor[r]$的值一定不同。而且很显然，这个区间的贡献为$2^k$。</strong></li></ol><p>有上述的两个性质，我们的目标其实就是拆分数位，针对每个数位，找到整个$[1,n]$区间内有多少对前缀异或和结果不同。假设在$[1,n]$中的第$k$位数字有$x$个数该位是$1$，那么就有$n-x$个位置是$0$。这样只是找到了区间长度≥2的贡献，但是题目规定单个数字也算贡献，不妨再加上一个$x$，问题转化成在两个数字集合中分别挑选一个数字，问有多少对数字，因此第$k$位总体贡献是$x(n-x+1)2^k$。</p><p>实现就很简单，我们针对每一位$k$，求异或和的每一步时，更新这个$x$，最后算一下贡献就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">gao1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">20</span>; k++) &#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      cur ^= (a[i] &gt;&gt; k) &amp; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(cur == <span class="number">1</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    ret += cnt * (n - cnt + <span class="number">1</span>) % mod * (<span class="number">1L</span>L &lt;&lt; k) % mod;</span><br><span class="line">    ret %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Task 2：求和的异或</strong></p><p>考虑和第一问一样的做法，要求的答案为异或和，考虑这个和的第$k$位什么时候为$1$：当出现的在这一位为$1$时的区间$[l,r]$内数字之和为奇数个的时候贡献为$2^k$。</p><p>我们又能发现一个规律：当区间[l,r]的和的第k位是奇数时，有：<br>$$<br>(s[r]-s[l-1])\ mod \ 2^{k+1}\ ≥\ 2^k<br>$$<br>针对每一位$k$，我们可以预处理出来前i项的和$s[i]$，离散化这个$s$以后用树状数组维护每个位置$i$左右两侧是否满足上述条件。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;LL&gt; bit;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i+=lowbit(i)) &#123;</span><br><span class="line">    bit[i] ^= v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= <span class="number">1</span>; i-=lowbit(i)) &#123;</span><br><span class="line">    ret ^= bit[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;LL&gt; s(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">vector</span>&lt;LL&gt; h(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    s[i] = s[i<span class="number">-1</span>] + a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> id = [&amp;](LL cur) &#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(h.begin(), h.end(), cur) - h.begin() + <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</span><br><span class="line">    LL tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      h[i] = s[i] &amp; ((<span class="number">1L</span>L &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(h.begin(), h.end());</span><br><span class="line">    bit = <span class="built_in">vector</span>&lt;LL&gt;(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      LL cur = s[i] &amp; ((<span class="number">1L</span>L &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">      add(id(cur), <span class="number">1L</span>L);</span><br><span class="line">      tmp ^= sum(id(cur-(<span class="number">1L</span>L&lt;&lt;k))) ^ sum(id(cur+(<span class="number">1L</span>L&lt;&lt;k))) ^ sum(id(cur));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="number">1</span>) ret |= (<span class="number">1L</span>L &lt;&lt; k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这个题，学到了要去讨论所求结果和计算过程的特点这样的思路。例如本题的两个问就是要针对区间内的异或和或答案的异或和中的每一位做讨论。</p><p>于是，遇到异或和考虑到先讨论一下每一位的贡献就对啦~</p><p>提交的时候报了CE，emmm懒得改就这样吧</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(<span class="meta-string">"O3"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">998244353L</span>L;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      cur ^= (a[i] &gt;&gt; k) &amp; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(cur == <span class="number">1</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    ret += cnt * (n - cnt + <span class="number">1</span>) % mod * (<span class="number">1L</span>L &lt;&lt; k) % mod;</span><br><span class="line">    ret %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; bit;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, LL v)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &lt;= n; i+=lowbit(i)) &#123;</span><br><span class="line">    bit[i] ^= v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt;= <span class="number">1</span>; i-=lowbit(i)) &#123;</span><br><span class="line">    ret ^= bit[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">vector</span>&lt;LL&gt; s(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">vector</span>&lt;LL&gt; h(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    s[i] = s[i<span class="number">-1</span>] + a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">auto</span> id = [&amp;](LL cur) &#123;</span><br><span class="line">    <span class="keyword">return</span> lower_bound(h.begin(), h.end(), cur) - h.begin() + <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">32</span>; k++) &#123;</span><br><span class="line">    LL tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      h[i] = s[i] &amp; ((<span class="number">1L</span>L &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(h.begin(), h.end());</span><br><span class="line">    bit = <span class="built_in">vector</span>&lt;LL&gt;(n+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      LL cur = s[i] &amp; ((<span class="number">1L</span>L &lt;&lt; (k + <span class="number">1</span>)) - <span class="number">1</span>);</span><br><span class="line">      add(id(cur), <span class="number">1L</span>L);</span><br><span class="line">      tmp ^= sum(id(cur-(<span class="number">1L</span>L&lt;&lt;k))) ^ sum(id(cur+(<span class="number">1L</span>L&lt;&lt;k))) ^ sum(id(cur));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="number">1</span>) ret |= (<span class="number">1L</span>L &lt;&lt; k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    a.resize(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, gao1(), gao2());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.lydsy.com/JudgeOnline/problem.php?id=4017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.lydsy.com/JudgeOnline/problem.php?id=4017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（这是一道好题）给你n个数，分别问这n个数中任意两个区间的异或和的加和是多少、任意两个区间的和的异或和是多少。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="BZOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/BZOJ/"/>
    
    
      <category term="树状数组" scheme="https://vincentxwd.github.io/blog/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="异或" scheme="https://vincentxwd.github.io/blog/tags/%E5%BC%82%E6%88%96/"/>
    
  </entry>
  
  <entry>
    <title>[CF1023] Codeforces Round #504(Div.1+Div.2)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/18/CF1023-Codeforces-Round-504-Div-1-Div-2/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/18/CF1023-Codeforces-Round-504-Div-1-Div-2/</id>
    <published>2018-08-18T03:45:42.000Z</published>
    <updated>2018-08-18T05:05:46.388Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1023" target="_blank" rel="noopener">http://codeforces.com/contest/1023</a></p><p><strong>我，七夕，掉分</strong></p><a id="more"></a><p>A：<strong>两个字符串，其中一个字符串里至多有个“*”表示任何字符都能匹配。问这两个字符串能不能匹配。</strong></p><p>从左到右扫两个字符串的相同前缀和后缀，然后看看是不是存在“*”以及两头不相接。据说这题被cha得很厉害啊？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300100</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(s, t) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[i] == t[j]) &#123;</span><br><span class="line">      i++,j++;tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = n - <span class="number">1</span>, q = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(s[p] == t[q]) &#123;</span><br><span class="line">      p--,q--;tot++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i == p) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">'*'</span> &amp;&amp; tot &lt;= m) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B：<strong>给你两个数$n$和$k$，问你$k$有多少能用不超过$n$的两个不同的数的和来表示，忽略顺序。</strong></p><p>设$k=x+y$，要满足$x≤n$、$y≤n$和$x≠y$。我们会发现，需要讨论$k≥2n$、$k≤n$和$n＜k＜2n$三个情况。前两个不必多说，第三个我们也是只需要统计从$\frac{k}{2}$数到$n$有多少个整数就行，因为总有$x＜\frac{k}{2}$和它对应。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;k)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(k / <span class="number">2</span> &gt;= n) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k &lt;= n) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, k % <span class="number">2</span> == <span class="number">0</span> ? k / <span class="number">2</span> - <span class="number">1</span> : k / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n-k/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C：<strong>给定长为$n$的合法括号序列，让你求一个长为$k$的合法括号子序列。</strong></p><p>维护每一个下标为$i$的左括号对应的右括号下标$to[i]=j$，然后贪心地从左到右扫符合当前长度条件$k≥to[i]-i+1$的括号序列，每找到一堆符合条件的括号序列要更新$k$和$i$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> to[maxn];</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">if</span>(n == k) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">    <span class="built_in">memset</span>(to, <span class="number">0</span>, <span class="keyword">sizeof</span>(to));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">        st.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> id = st.top(); st.pop();</span><br><span class="line">        to[i] = id; to[id] = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> tot = k, i = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; pos;</span><br><span class="line">    <span class="keyword">while</span>(tot) &#123;</span><br><span class="line">      <span class="keyword">if</span>(to[i] - i + <span class="number">1</span> &lt;= tot  &amp;&amp; to[i] - i + <span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        tot -= (to[i] - i + <span class="number">1</span>);</span><br><span class="line">        pos.emplace_back(i, to[i]);</span><br><span class="line">        i = to[i] + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos.size(); i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = pos[i].first; j &lt;= pos[i].second; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D：<strong>原本有$n$个范围在$[1,q]$的数，定义染色操作$[l_i,r_i]$表示将$[l_i,r_i]$区间内的数字变为$i$，现在给你$n$个染色后的数字作为结果，其中含有数字$0$表示这里可以是任意数字，问你$q$次操作能不能把原本的序列变成这个序列。</strong></p><p>考虑到每次染色为一个区间，每个数字$i$仅能染色一次。那么在进行过一次染色操作后，这个区间内的数字必然不能比$i$小。</p><p>问题在于如何处理$0$，我们考虑有一个$0$在某个区间$[L,R]$内，且$a_L$与$a_R$相同，$[L,R]$中不存在除了$0$以外小于$a_L$的数字。那么我们可以将这个0置为相邻两侧数字中的任意一个，作为扩展那个数字的区间长度。</p><p>因此我们构造时只需要维护每一个数字的最右侧相同的那个数字，整个区间必然会被覆盖一次。然后用线段树维护区间最小值，存在有小于区间端点的数字时必然无法构造。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="keyword">int</span> r[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lrt rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrt rt &lt;&lt; 1 | 1</span></span><br><span class="line"><span class="keyword">int</span> seg[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">  seg[rt] = min(seg[lrt], seg[rrt]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">    seg[rt] = a[l];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(l,m,lrt);</span><br><span class="line">  build(m+<span class="number">1</span>,r,rrt);</span><br><span class="line">  pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    <span class="keyword">return</span> seg[rt];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line">  <span class="keyword">if</span>(m &gt;= L) ret = min(ret, query(L, R, l, m, lrt));</span><br><span class="line">  <span class="keyword">if</span>(m &lt; R) ret = min(ret, query(L, R, m+<span class="number">1</span>, r, rrt));</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q)) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(r, <span class="number">0</span>, <span class="keyword">sizeof</span>(r));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">      r[a[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!r[q]) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!r[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> a[r[<span class="number">0</span>]] = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="number">0</span>) a[i] = a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="number">0</span>) a[i] = a[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">1</span>;</span><br><span class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> tmp;</span><br><span class="line">      <span class="keyword">if</span>(!r[a[i]]) <span class="keyword">continue</span>;</span><br><span class="line">      tmp = query(i, r[a[i]], <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span>(tmp &lt; a[i]) &#123;</span><br><span class="line">        ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[i], <span class="string">" \n"</span>[i==n]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1023&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1023&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我，七夕，掉分&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="构造" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="线段树" scheme="https://vincentxwd.github.io/blog/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[Hackerrank] CodeKnight 1.0 A-D题解（线段树, 二分, 组合计数, 尺取）</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/16/Hackerrank-CodeKnight-1-0-A-D%E9%A2%98%E8%A7%A3/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/16/Hackerrank-CodeKnight-1-0-A-D题解/</id>
    <published>2018-08-16T13:59:42.000Z</published>
    <updated>2018-08-16T14:18:21.516Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.hackerrank.com/contests/codeknight-1/challenges" target="_blank" rel="noopener">https://www.hackerrank.com/contests/codeknight-1/challenges</a></p><p><strong>这些题好蛋疼啊。。。。</strong></p><a id="more"></a><p>Magical Cards：<strong>给你一个整数$n$，问你有多少种拆分方法，将这个数拆成素数的乘积。</strong></p><p>首先将这个数分解质因数，并记下每个素因数的个数$c[i]$以及一共有多少个素因数$tot$，问题转化成将这$tot$个素因数有多少种排列方式了。直接考虑每一类素因数$p[i]$要在$tot$个位置中占据$c[i]$个位置，每一种素因数的排放实际上是相互独立的。则位置有$C_{tot}^{p[i]}$种，剩下$tot-p[i]$个空位下一个质因数再放就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10010</span>;</span><br><span class="line">LL f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line">    f[<span class="number">1</span>] = f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; maxn; i++) f[i] = f[i<span class="number">-1</span>] * i;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        LL m = n, tot = <span class="number">0</span>;</span><br><span class="line">        c.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                    cnt++; n /= i;</span><br><span class="line">                    tot++;</span><br><span class="line">                &#125;</span><br><span class="line">                c.emplace_back(cnt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            tot++;</span><br><span class="line">            c.emplace_back(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        LL ret = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c.size(); i++) &#123;</span><br><span class="line">            ret = f[tot] / f[c[i]] / f[tot-c[i]] * ret;</span><br><span class="line">            tot -= c[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Shubham and Subarrays：<strong>给你n个数，和一个整数k。让你求有多少个子区间的乘积为k。</strong></p><p>考虑这样的区间问题首先想到尺取，但是仅尺取还不够。考虑k=1的情况，假如有连续的1存在（如：1 1 1 1），那么实际上有6种（$\frac{3×(3+1)}{2}$）。特殊处理掉这个情况，剩下的再计算乘积恰好为k时，左右两个指针外部的1的贡献就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL k, x[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;PLL&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;n,&amp;k);</span><br><span class="line">    v.clear(); v.emplace_back(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x[i]);</span><br><span class="line">      <span class="keyword">if</span>(x[i] != <span class="number">1</span>) &#123;</span><br><span class="line">        v.emplace_back(x[i], i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    v.emplace_back(<span class="number">0</span>, n);</span><br><span class="line">    LL one = <span class="number">0</span>, ret = <span class="number">0</span>, cur = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">      cur = v[i].second - v[i<span class="number">-1</span>].second;</span><br><span class="line">      one += (cur - <span class="number">1</span>) * cur / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, one);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line">    cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(r &lt; v.size() - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(cur * v[r].first == k) &#123;</span><br><span class="line">        cur *= v[r].first;</span><br><span class="line">        r++;</span><br><span class="line">        ret += (v[r].second - v[r<span class="number">-1</span>].second) * (v[l].second - v[l<span class="number">-1</span>].second);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(cur * v[r].first &lt; k) &#123;</span><br><span class="line">        cur *= v[r].first;</span><br><span class="line">        r++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(cur * v[r].first &gt; k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) l++, r++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          cur /= v[l].first;</span><br><span class="line">          l++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Chef and Cakes：这题太水，不多说了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        vis.clear();</span><br><span class="line">        <span class="keyword">int</span> x, a = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;n; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            vis[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : vis) &#123;</span><br><span class="line">            a = max(a, x.second);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, vis.size(), a);</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Domino’s：<strong>n个多米诺骨牌，每个骨牌的位置为$x_i$，高度为$h_i$，每个骨牌向右倒下能砸到$[x+1,x+h-1]$范围的骨牌。现在让你统计每一个骨牌从它的位置向右倒下后能砸倒多少骨牌（多米诺骨牌后面的骨牌被砸倒还会影响到后面的）。</strong></p><p>我们给n个多米诺骨牌按$x_i$排序后发现，由于最右边的骨牌倒下的影响只有自己，即为1，于是我们考虑从右往左开始处理：设我们骨牌的结果为$dp_i$，每当处理到第$i$个骨牌时，我们单张骨牌砸中的范围为$[x_i+1,x_i+h_i-1]$，我们对再它右边的骨牌中找到能砸中骨牌最多的那张牌即可（当然这里也有递推关系）。使用线段树维护每一个骨牌的dp值，每次查询的时候首先二分$[x_i+1,x_i+h_i-1]$（即受到当前骨牌影响的骨牌）中的下标$aim$，然后在线段树上查询$[pos+1, aim]$内dp值最大的下标id$，对于每一个骨牌$i$，答案为这个骨牌右边的dp值+这个骨牌左边至$i$骨牌中的骨牌数量$id-pos-1+dp$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> PLL = pair&lt;LL, LL&gt;;</span><br><span class="line"><span class="keyword">using</span> Node = struct &#123;</span><br><span class="line">  LL x, h, id;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Node p[maxn];</span><br><span class="line">LL dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lrt rt &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rrt rt &lt;&lt; 1 | 1</span></span><br><span class="line">LL seg[maxn&lt;&lt;<span class="number">4</span>], id[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(LL rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(seg[lrt] &gt; seg[rrt]) &#123;</span><br><span class="line">    seg[rt] = seg[lrt];</span><br><span class="line">    id[rt] = id[lrt];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    seg[rt] = seg[rrt];</span><br><span class="line">    id[rt] = id[rrt];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(LL l, LL r, LL rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">    seg[rt] = <span class="number">1</span>;</span><br><span class="line">    id[rt] = l;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LL m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  build(l, m, lrt);</span><br><span class="line">  build(m+<span class="number">1</span>, r, rrt);</span><br><span class="line">  pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(LL x, LL p, LL l, LL r, LL rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">    seg[rt] = x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LL m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(p &lt;= m) update(x, p, l, m, lrt);</span><br><span class="line">  <span class="keyword">else</span> update(x, p, m+<span class="number">1</span>, r, rrt);</span><br><span class="line">  pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">PLL <span class="title">query</span><span class="params">(LL L, LL R, LL l, LL r, LL rt)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class="line">    <span class="keyword">return</span> make_pair(seg[rt], id[rt]);</span><br><span class="line">  &#125;</span><br><span class="line">  LL m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  PLL ret = make_pair(<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span>(L &lt;= m) &#123;</span><br><span class="line">    ret = max(ret, query(L, R, l, m, lrt));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(R &gt; m) &#123;</span><br><span class="line">    ret = max(ret, query(L, R, m+<span class="number">1</span>, r, rrt));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(LL pos)</span> </span>&#123;</span><br><span class="line">  LL l = pos + <span class="number">1</span>, r = n;</span><br><span class="line">  LL hi = p[pos].x + p[pos].h - <span class="number">1</span>;</span><br><span class="line">  LL aim = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(p[m].x &lt;= hi) &#123;</span><br><span class="line">      aim = m;</span><br><span class="line">      l = m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> r = m - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(aim == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  PLL id = query(pos+<span class="number">1</span>, aim, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> (id.second - pos - <span class="number">1</span>) + id.first;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="comment">// freopen("out", "w", stdout);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].h;</span><br><span class="line">      p[i].id = i;</span><br><span class="line">      dp[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+n+<span class="number">1</span>, [](Node a, Node b) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.x == b.x ? a.h &lt; b.h : a.x &lt; b.x;</span><br><span class="line">    &#125;);</span><br><span class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      dp[i] += gao(i);</span><br><span class="line">      update(dp[i], i, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;LL&gt; ret; ret.resize(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      ret[p[i].id] = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, ret[i], <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.hackerrank.com/contests/codeknight-1/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/contests/codeknight-1/challenges&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这些题好蛋疼啊。。。。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Hackerrank" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Hackerrank/"/>
    
    
      <category term="二分" scheme="https://vincentxwd.github.io/blog/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="线段树" scheme="https://vincentxwd.github.io/blog/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="组合" scheme="https://vincentxwd.github.io/blog/tags/%E7%BB%84%E5%90%88/"/>
    
      <category term="计数" scheme="https://vincentxwd.github.io/blog/tags/%E8%AE%A1%E6%95%B0/"/>
    
      <category term="尺取" scheme="https://vincentxwd.github.io/blog/tags/%E5%B0%BA%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ3501] Calculation 2 (容斥 or 欧拉函数)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/13/HDOJ3501-Calculation-2-%E5%AE%B9%E6%96%A5-or-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/13/HDOJ3501-Calculation-2-容斥-or-欧拉函数/</id>
    <published>2018-08-13T15:24:19.000Z</published>
    <updated>2018-08-13T15:45:28.597Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3501" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=3501</a></p><p><strong>求一个数n的所有小于它并且与它不互质的数的和。</strong></p><a id="more"></a><p>打算复习一波欧拉函数的，结果这题发现可以容斥。</p><p>我们知道如果一个数$n$含有因数$x$，那么$x$的倍数都和$n$不互质，且质因数至少为$x$。</p><p>我们可以知道，对于任意小于$n$的因数$x$，对本题的贡献为$x+2x+3x+…+kx=\frac{k(k+1)}{2}x$，其中$k$为$n$对$x$的倍数。</p><p>于是直接对$n$分解因数，再容斥。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b == <span class="number">0</span>) &#123;</span><br><span class="line">    x = <span class="number">1</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    LL ret = exgcd(b, a%b, x, y);</span><br><span class="line">    LL tmp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = tmp - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL a)</span> </span>&#123;</span><br><span class="line">  LL x, y;</span><br><span class="line">  exgcd(a, mod, x, y);</span><br><span class="line">  <span class="keyword">return</span> (x % mod + mod) % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r" ,stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) &amp;&amp; n) &#123;</span><br><span class="line">    LL t = n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;LL&gt; p;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(n % i == <span class="number">0</span>) p.push_back(i);</span><br><span class="line">      <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) p.push_back(n);</span><br><span class="line">    <span class="keyword">int</span> nn = <span class="number">1</span> &lt;&lt; p.size();</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nn; i++) &#123;</span><br><span class="line">      LL tmp = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; p.size(); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">          tmp *= p[j];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      LL cnt = t / tmp;</span><br><span class="line">      tmp = cnt * (cnt - <span class="number">1</span>) % mod * inv(<span class="number">2</span>) % mod * tmp % mod;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(__builtin_popcount(i) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        ret += tmp; ret %= mod;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ret -= tmp; ret += mod; ret %= mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来考虑欧拉函数，知道一个定理：小于$n$的数，且与$n$互质的数的和为：<br>$$<br>\frac{\phi(n)×n}{2}<br>$$<br>然而小于$n$的数的和为$\frac{n(n-1)}{2}$，于是我们一减：<br>$$<br>\frac{n(n-1-\phi(n))}{2}<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r" ,stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n) &amp;&amp; n) &#123;</span><br><span class="line">    LL ret = n, t = n;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">2</span>; i * i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(n % i == <span class="number">0</span>) ret = ret / i * (i<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">while</span>(n % i == <span class="number">0</span>) n /= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; <span class="number">1</span>) ret = ret / n * (n<span class="number">-1</span>);</span><br><span class="line">    LL p = t * (t - <span class="number">1</span> - ret) / <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p % mod &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=3501&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=3501&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;求一个数n的所有小于它并且与它不互质的数的和。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="容斥" scheme="https://vincentxwd.github.io/blog/tags/%E5%AE%B9%E6%96%A5/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6395] Sequence (反演思想，整除分块，矩阵快速幂)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/13/HDOJ6395-Sequence-%E6%95%B4%E9%99%A4%E5%88%86%E5%9D%97%EF%BC%8C%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/13/HDOJ6395-Sequence-整除分块，矩阵快速幂/</id>
    <published>2018-08-13T12:57:01.000Z</published>
    <updated>2018-08-13T13:03:01.936Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6395" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6395</a></p><p><strong>就算个式子。</strong></p><a id="more"></a><p>这题关键在于如何处理后面的下取整分式，会发现如何构造这个矩阵都不太好弄这个式子。知道一点莫比乌斯反演，考虑到了按照整除结果对取整式进行分块，每一块单独跑块长次矩阵快速幂，然后累计到结果上就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  LL m[maxn][maxn];</span><br><span class="line">  LL r;</span><br><span class="line">  LL c;</span><br><span class="line">  Matrix()&#123;</span><br><span class="line">    r = c = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(m, <span class="number">0</span>, <span class="keyword">sizeof</span>(m));</span><br><span class="line">  &#125; </span><br><span class="line">&#125; Matrix;</span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix m1, Matrix m2)</span> </span>&#123;</span><br><span class="line">  Matrix ret = Matrix();</span><br><span class="line">  ret.r = m1.r; ret.c = m2.c;</span><br><span class="line">  <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m1.r; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(LL j = <span class="number">1</span>; j &lt;= m2.r; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(LL k = <span class="number">1</span>; k &lt;= m2.c; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m2.m[j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ret.m[i][k] = (ret.m[i][k] + (m1.m[i][j] * m2.m[j][k]) % mod) % mod;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">quickmul</span><span class="params">(Matrix m, LL n)</span> </span>&#123;</span><br><span class="line">  Matrix ret = Matrix();</span><br><span class="line">  <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= m.r; i++) ret.m[i][i]  = <span class="number">1</span>;</span><br><span class="line">  ret.r = m.r;</span><br><span class="line">  ret.c = m.c;</span><br><span class="line">  <span class="keyword">while</span>(n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) ret = mul(m, ret);</span><br><span class="line">    m = mul(m, m);</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LL a, b, c, d, p, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  LL T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;T);</span><br><span class="line">  Matrix mat, ret;</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%lld"</span>,&amp;a,&amp;b,&amp;c,&amp;d,&amp;p,&amp;n);</span><br><span class="line">    mat.r = mat.c = <span class="number">3</span>;</span><br><span class="line">    ret.r = <span class="number">3</span>; ret.c = <span class="number">1</span>;</span><br><span class="line">    mat.m[<span class="number">1</span>][<span class="number">1</span>] = d, mat.m[<span class="number">1</span>][<span class="number">2</span>] = c;</span><br><span class="line">    mat.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; mat.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    mat.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    ret.m[<span class="number">1</span>][<span class="number">1</span>] = b; ret.m[<span class="number">2</span>][<span class="number">1</span>] = a; ret.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, a);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; p) &#123;</span><br><span class="line">      <span class="keyword">for</span>(LL i = <span class="number">3</span>; i &lt;= n; i=p/(p/i)+<span class="number">1</span>) &#123;</span><br><span class="line">        mat.m[<span class="number">1</span>][<span class="number">1</span>] = d, mat.m[<span class="number">1</span>][<span class="number">2</span>] = c;</span><br><span class="line">        mat.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; mat.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        mat.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        mat.m[<span class="number">1</span>][<span class="number">3</span>] = (p / i);</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= p / (p/i)) mat = quickmul(mat, n-i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> mat = quickmul(mat, p/(p/i)+<span class="number">1</span>-i);</span><br><span class="line">        ret = mul(mat, ret);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret.m[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">3</span>; i &lt;= p; i=p/(p/i)+<span class="number">1</span>) &#123;</span><br><span class="line">      mat.m[<span class="number">1</span>][<span class="number">1</span>] = d, mat.m[<span class="number">1</span>][<span class="number">2</span>] = c;</span><br><span class="line">      mat.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; mat.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">      mat.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">      mat.m[<span class="number">1</span>][<span class="number">3</span>] = (p / i);</span><br><span class="line">      mat = quickmul(mat, p/(p/i)+<span class="number">1</span>-i);</span><br><span class="line">      ret = mul(mat, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    mat.m[<span class="number">1</span>][<span class="number">1</span>] = d, mat.m[<span class="number">1</span>][<span class="number">2</span>] = c;</span><br><span class="line">    mat.m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>; mat.m[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    mat.m[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">0</span>; mat.m[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    mat.m[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">0L</span>L;</span><br><span class="line">    mat = quickmul(mat, n-max(p, <span class="number">2L</span>L));</span><br><span class="line">    ret = mul(mat, ret);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret.m[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6395&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6395&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;就算个式子。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="矩阵快速幂" scheme="https://vincentxwd.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="分块" scheme="https://vincentxwd.github.io/blog/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6386] Age of Moyu (最短路)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/13/HDOJ6386-Age-of-Moyu-%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/13/HDOJ6386-Age-of-Moyu-最短路/</id>
    <published>2018-08-13T12:56:35.000Z</published>
    <updated>2018-08-13T13:00:20.975Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6386" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6386</a></p><p><strong>意思就是地铁换乘，问你怎么坐，换乘次数最少</strong></p><a id="more"></a><p>这题数据水了，我的代码放过去去了。正解应该是维护到点的每个最短的距离的线路，然后更新的时候从这个线路中去找有没有存在的。我这里只是维护了最短路的上一个线路（看来是没有二条以上路径相同但是线路不同的数据），最后正着倒着各跑一次dijkstra取min的。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">typedef</span> tuple&lt;LL, LL, LL&gt; TP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">  LL v, w, next;</span><br><span class="line">&#125;Edge;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxm = <span class="number">2001000</span>;</span><br><span class="line"><span class="keyword">const</span> LL inf = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line">LL n, m, ee;</span><br><span class="line">LL d[maxn];</span><br><span class="line">LL head[maxn];</span><br><span class="line">Edge e[maxm];</span><br><span class="line">priority_queue&lt;TP, <span class="built_in">vector</span>&lt;TP&gt;, greater&lt;TP&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ee = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(LL u, LL v, LL w)</span> </span>&#123;</span><br><span class="line">  e[ee].v = v; e[ee].w = w; e[ee].next = head[u]; head[u] = ee++;</span><br><span class="line">  e[ee].v = u; e[ee].w = w; e[ee].next = head[v]; head[v] = ee++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dijkstra</span><span class="params">(LL s, LL t)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(d, <span class="number">0x7f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">  d[s] = <span class="number">0</span>;</span><br><span class="line">  LL pre_cost, pre_id, from;</span><br><span class="line">  pq.push(TP(<span class="number">0</span>, <span class="number">-1</span>, s));</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">    tie(pre_cost, pre_id, from) = pq.top(); pq.pop();</span><br><span class="line">    <span class="keyword">if</span>(d[from] &lt; pre_cost) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = head[from]; ~i; i=e[i].next) &#123;</span><br><span class="line">      LL v = e[i].v, w = e[i].w;</span><br><span class="line">      LL cost, cur_id;</span><br><span class="line">      <span class="keyword">if</span>(w == pre_id) &#123;</span><br><span class="line">        cost = <span class="number">0</span>; cur_id = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        cost = <span class="number">1</span>; cur_id = w;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cost + d[from] &lt; d[v]) &#123;</span><br><span class="line">        d[v] = cost + d[from];</span><br><span class="line">        pq.push(TP(d[v], cur_id, v));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> d[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">find</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x == d[x] ? x : d[x] = find(d[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  LL u, v, w;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%I64d%I64d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">      d[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%I64d%I64d%I64d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">      d[find(u)] = find(v);</span><br><span class="line">      adde(u, v, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(find(<span class="number">1</span>) != find(n)) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, min(dijkstra(n, <span class="number">1</span>), dijkstra(<span class="number">1</span>, n)));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6386&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;意思就是地铁换乘，问你怎么坐，换乘次数最少&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="最短路" scheme="https://vincentxwd.github.io/blog/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>2018百度之星-初赛（B）ADF题解</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/12/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E5%88%9D%E8%B5%9B%EF%BC%88B%EF%BC%89ADF%E9%A2%98%E8%A7%A3/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/12/2018百度之星-初赛（B）ADF题解/</id>
    <published>2018-08-12T13:11:30.000Z</published>
    <updated>2018-08-12T13:20:01.675Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=826" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=826</a></p><p>只会签到。。。</p><a id="more"></a><p>A： 因为无限添加，考虑先把另外一些树加到这个点上，再把其他子树的叶子加到某一个点上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">int</span> in[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; pre[find(x)] = find(y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T, u, v;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="built_in">memset</span>(in, <span class="number">0</span>, <span class="keyword">sizeof</span>(in));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) pre[i] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">      in[u]++, in[v]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      ret = max(ret, in[i]+n-in[i]<span class="number">-1</span>-max(<span class="number">0</span>, m-in[i]-k));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D：这题直接二分答案，即最小的那个数字。然后按照这个数字来划分是加还是减，保证加的次数的2倍比减的次数多就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">300200</span>;</span><br><span class="line">LL n;</span><br><span class="line">LL x[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(LL mid)</span> </span>&#123;</span><br><span class="line">  LL a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(x[i] &gt; mid+<span class="number">1</span>) &#123;</span><br><span class="line">      b += (x[i] - mid) / <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> a += max(<span class="number">0L</span>L, mid-x[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>  b &gt;= a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  LL T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;x[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(x+<span class="number">1</span>, x+n+<span class="number">1</span>);</span><br><span class="line">    LL lo = <span class="number">0</span>, hi = <span class="number">1E9</span>;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">      LL mid = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span>(gao(mid)) &#123;</span><br><span class="line">        lo = mid + <span class="number">1</span>;</span><br><span class="line">        ret = mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        hi = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%I64d\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>F：因为$x_i$和$y_i$不会存在重复的，那么直接垂直接到最近的边上就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL mx, my, q, x, y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; mx &gt;&gt; my &gt;&gt; q;</span><br><span class="line">      LL ret = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">          <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">          LL tmp = x &lt; mx - x ? x : mx - x;</span><br><span class="line">          <span class="keyword">if</span>(x &lt; mx - x) tmp = x;</span><br><span class="line">          <span class="keyword">else</span> tmp = mx - x;</span><br><span class="line">          <span class="keyword">if</span>(tmp &gt;= y) tmp = y;</span><br><span class="line">          <span class="keyword">if</span>(tmp &gt;= my - y) tmp = my - y;</span><br><span class="line">          ret += tmp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=826&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=826&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只会签到。。。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
      <category term="二分" scheme="https://vincentxwd.github.io/blog/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[CF1020A-C] Codeforces Round #503 (Div.2)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/12/CF1020A-C-Codeforces-Round-503-Div-2/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/12/CF1020A-C-Codeforces-Round-503-Div-2/</id>
    <published>2018-08-12T05:15:17.000Z</published>
    <updated>2018-08-12T05:25:18.404Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1020" target="_blank" rel="noopener">http://codeforces.com/contest/1020</a></p><p><strong>上分啦</strong></p><a id="more"></a><p>A：<strong>n个楼每个楼h层，在每栋楼的$[a,b]$层上都有一个横向的通道，可以从一个楼去任意楼。现在给你两个位置，问最少要走多少步。</strong></p><p>对两个位置和通道区间进行讨论，然后抠一下就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL n, h, a, b, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  LL ta, fa, tb, fb;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;h&gt;&gt;a&gt;&gt;b&gt;&gt;k) &#123;</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;ta&gt;&gt;fa&gt;&gt;tb&gt;&gt;fb;</span><br><span class="line">      LL ret = (LL)<span class="built_in">abs</span>(ta - tb);</span><br><span class="line">      <span class="keyword">if</span>(ta == tb) &#123;</span><br><span class="line">        ret += (LL)<span class="built_in">abs</span>(fa - fb);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa &gt; b &amp;&amp; fb &gt; b) &#123;</span><br><span class="line">          ret += (fa + fb - <span class="number">2L</span>L * b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fa &lt; a &amp;&amp; fb &lt; a) &#123;</span><br><span class="line">          ret += (<span class="number">2L</span>L * a - fa - fb);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ret += (LL)<span class="built_in">abs</span>(fa - fb);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B：<strong>意思就是让你从每个人出发找第一个遍历2次的点。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, p[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(vis[u]) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  vis[u] = <span class="number">1</span>;</span><br><span class="line">  dfs(p[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(p ,<span class="number">0</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;u);</span><br><span class="line">      p[i] = u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">      dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C：<strong>n个人要给m个政党投票，每个人都有自己的投票目标以及花钱收买他的代价。现在希望让1号政党的票数超过其他所有政党的票数，问你至少要花多少钱。</strong></p><p>考虑贪心地选花费最少的，但是直接这样选相当于确定了收买人数，实际上可以买某一个政党的一些票就可以减少收买人数。于是我们考虑枚举1号政党的目标票数，超过该票数的政党则购买所有最少价格的差票，如果还不足我们的目标票数则从剩下的票里选最便宜的买。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3030</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, W;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; f[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">int</span> p[maxn], w[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(<span class="keyword">int</span> vote)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  tmp.clear();</span><br><span class="line">  <span class="keyword">int</span> need = vote - W;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(f[i].size() &gt;= vote) &#123;</span><br><span class="line">      id = f[i].size() - vote + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id &gt; need) <span class="keyword">return</span> <span class="number">1E18</span>;</span><br><span class="line">    need -= id;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; id; j++) &#123;</span><br><span class="line">      ret += f[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = id; j &lt; f[i].size(); j++) &#123;</span><br><span class="line">      tmp.push_back(f[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(tmp.begin(), tmp.end());</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; need; i++) &#123;</span><br><span class="line">    ret += tmp[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) f[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i],&amp;w[i]);</span><br><span class="line">      f[p[i]].push_back(w[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      sort(f[i].begin(), f[i].end());</span><br><span class="line">    &#125;</span><br><span class="line">    LL ret = <span class="number">1E18</span>;</span><br><span class="line">    W = f[<span class="number">1</span>].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = W; i &lt;= n; i++) &#123;</span><br><span class="line">      ret = min(ret, gao(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1020&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上分啦&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="dfs" scheme="https://vincentxwd.github.io/blog/tags/dfs/"/>
    
  </entry>
  
  <entry>
    <title>[2018百度之星] 初赛（A）A-C题解</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/11/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E5%88%9D%E8%B5%9B%EF%BC%88A%EF%BC%89AA-C%E9%A2%98%E8%A7%A3/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/11/2018百度之星-初赛（A）AA-C题解/</id>
    <published>2018-08-11T11:48:32.000Z</published>
    <updated>2018-08-11T12:10:02.046Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=825" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=825</a></p><p><strong>这场出的三题，有两道和标算不太一样啊。。。其中一道题还是因为数据弱暴力过的，感觉这样下去不太行啊。。。</strong></p><a id="more"></a><p>A：直接按照长短排序，从大到小连续取3根，看看能不能构成三角形。取最大的三根就行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a, a+n);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i]&lt;a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>]) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        ret = a[i]+a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B：这里直接用deque或者list暴力就行，其实应该手写一个list，然后接头接尾直接翻转两个指针。（其实我想到了，但是写不来。码力太差了啊。。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">150100</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;&gt; l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">scan_d</span><span class="params">(<span class="keyword">int</span> &amp;num)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span> in;<span class="keyword">bool</span> IsN=<span class="literal">false</span>;</span><br><span class="line">  in=getchar();</span><br><span class="line">  <span class="keyword">if</span>(in==EOF) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span>(in!=<span class="string">'-'</span>&amp;&amp;(in&lt;<span class="string">'0'</span>||in&gt;<span class="string">'9'</span>)) in=getchar();</span><br><span class="line">  <span class="keyword">if</span>(in==<span class="string">'-'</span>)&#123; IsN=<span class="literal">true</span>;num=<span class="number">0</span>;&#125;</span><br><span class="line">  <span class="keyword">else</span> num=in-<span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">while</span>(in=getchar(),in&gt;=<span class="string">'0'</span>&amp;&amp;in&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">    num*=<span class="number">10</span>,num+=in-<span class="string">'0'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(IsN) num=-num;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  freopen(<span class="string">"in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">int</span> u, v, w, val;</span><br><span class="line">  <span class="keyword">while</span>(scan_d(n)) &#123;</span><br><span class="line">    l.resize(n+<span class="number">1</span>);</span><br><span class="line">    scan_d(q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) l[i].clear();</span><br><span class="line">    <span class="keyword">int</span> cmd;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">      scan_d(cmd);</span><br><span class="line">      <span class="keyword">if</span>(cmd == <span class="number">1</span>) &#123;</span><br><span class="line">        scan_d(u); scan_d(w); scan_d(val);</span><br><span class="line">        <span class="keyword">if</span>(w == <span class="number">0</span>) l[u].emplace_front(val);</span><br><span class="line">        <span class="keyword">else</span> l[u].emplace_back(val);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cmd == <span class="number">2</span>) &#123;</span><br><span class="line">        scan_d(u); scan_d(w);</span><br><span class="line">        <span class="keyword">if</span>(l[u].size() == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(w == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l[u].front());</span><br><span class="line">          l[u].pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l[u].back());</span><br><span class="line">          l[u].pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(cmd == <span class="number">3</span>) &#123;</span><br><span class="line">        scan_d(u); scan_d(v); scan_d(w);</span><br><span class="line">        <span class="keyword">if</span>(w == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">while</span>(!l[v].empty()) &#123;</span><br><span class="line">            l[u].emplace_back(l[v].front());</span><br><span class="line">            l[v].pop_front();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">while</span>(!l[v].empty()) &#123;</span><br><span class="line">            l[u].emplace_back(l[v].back());</span><br><span class="line">            l[v].pop_back();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C：（一道比较简单的签到题），这题我在第17分钟的时候就提交了DP做法，就是先把1串拆出来，两头的花费为1，中间的花费为2，然后做背包容量为k+1的01背包，一开始想的是最左花费为0，后来觉得不太对，有可能拆分后原先最左不在最左了，于是分了两种情况讨论了一下。折腾了2h才步入正轨。。。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10100</span>;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;&gt; seg;</span><br><span class="line"><span class="keyword">int</span> f[maxn], L, R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gao2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  seg.clear();</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[i] == <span class="string">'1'</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> j = i, tot = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">while</span>(j &lt; n &amp;&amp; s[j] == <span class="string">'1'</span>) &#123;</span><br><span class="line">        tot++, j++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">0</span>) seg.push_back(make_pair(tot, <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(j == n) seg.push_back(make_pair(tot, <span class="number">1</span>));</span><br><span class="line">      <span class="keyword">else</span> seg.push_back(make_pair(tot, <span class="number">2</span>));</span><br><span class="line">      i = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(s[<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> seg[<span class="number">0</span>].first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; seg.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = k; j &gt;= seg[i].second; j--) &#123;</span><br><span class="line">      f[j] = max(f[j], f[j-seg[i].second]+seg[i].first);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    k++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, gao2());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>赛后感觉应该把B C D按照正解做一下。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=825&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_show.php?cid=825&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这场出的三题，有两道和标算不太一样啊。。。其中一道题还是因为数据弱暴力过的，感觉这样下去不太行啊。。。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="暴力" scheme="https://vincentxwd.github.io/blog/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[总结] 关于01背包和完全背包以及优化</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/11/%E6%80%BB%E7%BB%93-%E5%85%B3%E4%BA%8E01%E8%83%8C%E5%8C%85%E5%92%8C%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/11/总结-关于01背包和完全背包/</id>
    <published>2018-08-10T17:22:48.000Z</published>
    <updated>2018-08-10T18:02:04.132Z</updated>
    
    <content type="html"><![CDATA[<p>今天晚上又被问起01背包和完全背包的遍历顺序了，我决定写一篇博文，这样再有人问我就可以直接把这篇文章发给他了。</p><p>我要不要先以我的方式来介绍一下这两个问题？首先我们知道01背包和完全背包的状态转移方程：</p><p>01背包：$f(i,j)=max{f(i-1,j), f(i-1,j-w_i)+v_i}$</p><p>完全背包：$f(i,j)=max{f(i-1,j),f(i-1,j-kw_i)+kv_i}$</p><p>简单解释一下，以01背包为例，我们定义$f(i,j)$为扫到第$i$个物品为止，背包容量为$j$时的最大价值。我们依次从第一个物品开始，决定要不要往这个背包里放，如果放的话，我们一定会从另一个状态转移过来，这个状态即扫到上一个物品、同时容量为$j-w_i$时的状态，为什么不是比$j-w_i$更小的一个状态？因为这个方程满足最优子结构：保证$f(i-1,j-w_i)$一定由上一个最优状态转移来，那么这个状态必然是最优的。完全背包也是如此，只不过朴素的做法需要多枚举一维第$i$个物品放的个数。</p><a id="more"></a><p>我们回到最开始的问题：01背包和完全背包的遍历顺序为什么会不一样？究竟有什么关系？</p><p>在我初学背包问题的时候也想到了这个问题，但是很久之后才去想着弄明白这件事。一般提出这个问题的是已经了解了这两种背包问题并且知道了他们的优化算法的同学。能提出这个问题也说明实际上并没有真正理解这两个状态转移的内涵（以及没认真看背包九讲2333）。</p><p>首先介绍一下01背包的优化，针对01背包的时间复杂度是无法再优化的了，但是朴素地开二维数组是冗余的。有人发现了这个问题，并且进一步发现了01背包的更新规律：<strong>在更新$i,j$时，并不会用到比$j$大的位置，即$f(i-1,k), k&gt;j$。</strong>这很显而易见，因为<strong>物品的重量（花费）是大于等于0的，因此$j-w_i≥j$是一定成立的</strong>。所以我们才会有那个喜闻乐见的一位数组优化，只不过内层的更新顺序是从背包容量到物品重量（花费）的递减遍历顺序，<strong>这样能保证我们的递推是由扫到上一个物品时留下的数组中更新过来的</strong>，我贴一下喜闻乐见的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = m; j &gt;= w[i]; j--) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j-w[i]]+v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果觉得还不够清楚，那我贴一个二维的、滚动数组形式的来帮你理解：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j &lt; w[i]) &#123;</span><br><span class="line">      f[i][j] = f[i<span class="number">-1</span>][j];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[i][j] = max(f[i][j], f[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j &lt; w[i]) &#123;</span><br><span class="line">      f[i][j] = f[i<span class="number">-1</span>][j];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[i][j] = max(f[i][j], f[i<span class="number">-1</span>][j-w[i]]+v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还会发现，一位数组优化后的代码更简洁，因为不需要转移$j&lt;w_i$时的状态（一位数组里，不转移就直接保存在原位了）。</p><p>这就是为什么一位数组优化的01背包内层循环遍历顺序为什么是背包容量到物品重量的原因。</p><p>再看一下完全背包，我们朴素的完全背包更新是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j &lt; w[i]) &#123;</span><br><span class="line">      f[i][j] = f[i<span class="number">-1</span>][j];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k * w[i] &lt;= j; k++) &#123;</span><br><span class="line">      f[i][j] = max(f[i][j], f[i<span class="number">-1</span>][j-k*w[i]]+k*v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多了一层，遍历物品件数，复杂度变高。</p><p>背包九讲里将完全背包转化为01背包来做，我们记得刚刚讨论过的01背包的一位数组优化，为了防止把扫到上一个物品的状态用扫到当前物品的状态更新掉，我们内层循环倒过来更新。但是反过来会发生什么呢？反过来的话，当我们更新$f(j)$的时候，会从$f(j-w_i)$更新过来，但<strong>此时$f(j-w_i)$或许已经包括了当前这个物品，那么$f(j)$再被此状态更新的话，实际上就相当于包括了两个物品$i$</strong>，这也是我们希望的，因为完全背包不限制每种物品数量，这也是这个优化成立的原因。贴份代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = w[i]; j &lt;= W; j++) &#123;</span><br><span class="line">    f[j] = max(f[j], f[j-w[i]]+v[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天晚上又被问起01背包和完全背包的遍历顺序了，我决定写一篇博文，这样再有人问我就可以直接把这篇文章发给他了。&lt;/p&gt;
&lt;p&gt;我要不要先以我的方式来介绍一下这两个问题？首先我们知道01背包和完全背包的状态转移方程：&lt;/p&gt;
&lt;p&gt;01背包：$f(i,j)=max{f(i-1,j), f(i-1,j-w_i)+v_i}$&lt;/p&gt;
&lt;p&gt;完全背包：$f(i,j)=max{f(i-1,j),f(i-1,j-kw_i)+kv_i}$&lt;/p&gt;
&lt;p&gt;简单解释一下，以01背包为例，我们定义$f(i,j)$为扫到第$i$个物品为止，背包容量为$j$时的最大价值。我们依次从第一个物品开始，决定要不要往这个背包里放，如果放的话，我们一定会从另一个状态转移过来，这个状态即扫到上一个物品、同时容量为$j-w_i$时的状态，为什么不是比$j-w_i$更小的一个状态？因为这个方程满足最优子结构：保证$f(i-1,j-w_i)$一定由上一个最优状态转移来，那么这个状态必然是最优的。完全背包也是如此，只不过朴素的做法需要多枚举一维第$i$个物品放的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法总结" scheme="https://vincentxwd.github.io/blog/categories/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
      <category term="总结" scheme="https://vincentxwd.github.io/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2018牛客多校07 C Bit Compression (DP)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/10/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A107-C-Bit-Compression-DP/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/10/2018牛客多校07-C-Bit-Compression-DP/</id>
    <published>2018-08-10T08:04:38.000Z</published>
    <updated>2018-08-10T08:08:40.854Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/145/C" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/145/C</a></p><p><strong>一个长度为$2^n$的01串，每次允许相邻两个数字进行与、或、异或操作，最终希望结果是1，问有多少种不同的操作路径。</strong></p><a id="more"></a><p>$f(i,j)$表示01串从$2^n$开始，扫到长度为$2^i$时，01串变为j时的路径数，用一个map来记录状态，然后暴力dp转移到下一层就行。整体复杂度是$O(2^nn)$，可以过。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300200</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; f[<span class="number">22</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">22</span>; i++) f[i].clear();</span><br><span class="line">    <span class="built_in">string</span> tmp;</span><br><span class="line">    <span class="keyword">int</span> tot;</span><br><span class="line">    f[n][s] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="built_in">string</span> a, b, c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">for</span>(it = f[i].begin(); it != f[i].end(); it++) &#123;</span><br><span class="line">        tmp = it-&gt;first, tot = it-&gt;second;</span><br><span class="line">        <span class="keyword">int</span> nn = (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">        a = b = c = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nn; j+=<span class="number">2</span>) &#123;</span><br><span class="line">          a += ((tmp[j]-<span class="string">'0'</span>) &amp; (tmp[j+<span class="number">1</span>]-<span class="string">'0'</span>)) + <span class="string">'0'</span>;</span><br><span class="line">          b += ((tmp[j]-<span class="string">'0'</span>) | (tmp[j+<span class="number">1</span>]-<span class="string">'0'</span>)) + <span class="string">'0'</span>;</span><br><span class="line">          c += ((tmp[j]-<span class="string">'0'</span>) ^ (tmp[j+<span class="number">1</span>]-<span class="string">'0'</span>)) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i<span class="number">-1</span>][a] += tot;</span><br><span class="line">        f[i<span class="number">-1</span>][b] += tot;</span><br><span class="line">        f[i<span class="number">-1</span>][c] += tot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[<span class="number">0</span>][<span class="string">"1"</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/145/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/145/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个长度为$2^n$的01串，每次允许相邻两个数字进行与、或、异或操作，最终希望结果是1，问有多少种不同的操作路径。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="2018牛客多校" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces348D] Turtles (DP, LGV引理)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/10/Codeforces348D-Turtles-LiDP-LGV%E5%BC%95%E7%90%86/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/10/Codeforces348D-Turtles-LiDP-LGV引理/</id>
    <published>2018-08-09T17:57:32.000Z</published>
    <updated>2018-08-09T18:05:16.583Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/348/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/348/problem/D</a></p><p><strong>两只乌龟在棋盘上从(1,1)出发到(n,m)，其中有的地方有障碍物，两只乌龟希望找到有多少对路径，使得他们到(n,m)的路上不相交。</strong></p><a id="more"></a><p>如果我没有做牛客多校，我也不会知道这个冷艳的Lindstrom-Gessel-Viennot引理。今天翻笔记看到了，还记得CF上有一道考这个的，于是来除草。</p><p>这东西出题很单一，就是用来计算n对起止点不相交路径组合数的，出题也挺单一，其中的一个trick可能是在拆点这方面，给出公式：</p><p><img src="http://pcoln8jiu.bkt.clouddn.com/CF348D1.png" alt="img"></p><p>其中$e(a_i,b_j)$表示从起点$a_i$到终点$b_j$的路径数，M的行列式的值就是我们要求的不相交路径的组合数了。</p><p>关于拆点，一般都是移动到起点附近步长为1的位置，终点也是，具体我不太明白，希望有朝一日能证明出来：)</p><p><img src="http://pcoln8jiu.bkt.clouddn.com/CF348D.png" alt="img"></p><p>这题的DP方程就很简单了，看代码吧：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3030</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1E9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> s[maxn][maxn];</span><br><span class="line">LL f[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>][<span class="number">2</span>] == <span class="string">'#'</span> || s[<span class="number">2</span>][<span class="number">1</span>] == <span class="string">'#'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">LL a, b, c, d;</span><br><span class="line">f[<span class="number">1</span>][<span class="number">2</span>] = (s[<span class="number">1</span>][<span class="number">2</span>] != <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'#'</span>) <span class="keyword">continue</span>;</span><br><span class="line">f[i][j] += (f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>]) % mod;</span><br><span class="line">f[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a = f[n<span class="number">-1</span>][m], b = f[n][m<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">f[<span class="number">2</span>][<span class="number">1</span>] = (s[<span class="number">2</span>][<span class="number">1</span>] != <span class="string">'#'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="string">'#'</span>) <span class="keyword">continue</span>;</span><br><span class="line">f[i][j] += (f[i<span class="number">-1</span>][j] + f[i][j<span class="number">-1</span>]) % mod;</span><br><span class="line">f[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">c = f[n<span class="number">-1</span>][m], d = f[n][m<span class="number">-1</span>];</span><br><span class="line">LL ret = ((a * d) % mod - (b * c) % mod + mod) % mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>哈，除草真开心啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/348/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/348/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两只乌龟在棋盘上从(1,1)出发到(n,m)，其中有的地方有障碍物，两只乌龟希望找到有多少对路径，使得他们到(n,m)的路上不相交。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
      <category term="组合数学" scheme="https://vincentxwd.github.io/blog/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1017E] The Supersonic Rocket (凸包, KMP)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/09/Codeforces1017E-The-Supersonic-Rocket-%E5%87%B8%E5%8C%85-KMP/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/09/Codeforces1017E-The-Supersonic-Rocket-凸包-KMP/</id>
    <published>2018-08-09T14:50:12.000Z</published>
    <updated>2018-08-09T14:52:39.164Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1017/problem/E" target="_blank" rel="noopener">http://codeforces.com/contest/1017/problem/E</a></p><p><strong>给你两组点，问你这两组点的凸包是不是同构的。</strong></p><a id="more"></a><p>先分别跑出两组点的凸包，判断一下点数是否相等，然后依次按照凸包的长度和拐点的角度记录下数列，然后可以用最小表示法都调成最小表示，或者对其中一个数列扩大两倍作匹配串，另一个作模式串跑KMP。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">1500500</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span> LL x, y; &#125;Point;</span><br><span class="line">Point point[maxn];</span><br><span class="line">LL st[maxn], top;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">cross</span><span class="params">(Point p0, Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (p1.x-p0.x)*(p2.y-p0.y)-(p1.y-p0.y)*(p2.x-p0.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">dis</span><span class="params">(Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (p2.x-p1.x)*(p2.x-p1.x)+(p2.y-p1.y)*(p2.y-p1.y);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Point p1, Point p2)</span> </span>&#123;</span><br><span class="line">  LL tmp = cross(point[<span class="number">0</span>], p1, p2);</span><br><span class="line">  <span class="keyword">if</span>(tmp &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(tmp == <span class="number">0</span>) <span class="keyword">return</span> dis(point[<span class="number">0</span>], p1) &lt; dis(point[<span class="number">0</span>], p2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">graham</span><span class="params">(LL n, <span class="built_in">vector</span>&lt;Point&gt; &amp;ret)</span> </span>&#123;</span><br><span class="line">  ret.clear();</span><br><span class="line">  <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(point[<span class="number">0</span>].y &gt;= point[i].y) &#123;</span><br><span class="line">      <span class="keyword">if</span>(point[<span class="number">0</span>].y == point[i].y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(point[<span class="number">0</span>].x &gt; point[i].x) swap(point[i], point[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> swap(point[<span class="number">0</span>], point[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  sort(point+<span class="number">1</span>, point+n, cmp);</span><br><span class="line">  top = <span class="number">0</span>;</span><br><span class="line">  st[top++] = <span class="number">0</span>, st[top++] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span>(top<span class="number">-2</span> &gt;= <span class="number">0</span> &amp;&amp; cross(point[st[top<span class="number">-2</span>]], point[st[top<span class="number">-1</span>]], point[i]) &lt;= <span class="number">0</span>) --top;</span><br><span class="line">    st[top++] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; top; i++) ret.emplace_back(point[st[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point a[maxn], b[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; conv1, conv2;</span><br><span class="line">LL n, m;</span><br><span class="line"></span><br><span class="line">LL na, nb;</span><br><span class="line">LL x[maxn];</span><br><span class="line">LL y[maxn];</span><br><span class="line">LL pre[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getpre</span><span class="params">(LL *y, LL *pre)</span> </span>&#123;</span><br><span class="line">  LL j, k;</span><br><span class="line">  <span class="built_in">memset</span>(pre, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="number">-1</span>));</span><br><span class="line">  pre[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">  j = <span class="number">0</span>; k = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(j &lt; nb) &#123;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">-1</span> || y[j] == y[k]) &#123;</span><br><span class="line">      j++; k++;</span><br><span class="line">      <span class="keyword">if</span>(y[j] != y[k]) pre[j] = k;</span><br><span class="line">      <span class="keyword">else</span> pre[j] = pre[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> k = pre[k];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">kmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  LL ans = <span class="number">0</span>;</span><br><span class="line">  LL i = <span class="number">0</span>;</span><br><span class="line">  LL j = <span class="number">0</span>;</span><br><span class="line">  getpre(y, pre);</span><br><span class="line">  <span class="keyword">while</span>(i &lt; na) &#123;</span><br><span class="line">    <span class="keyword">if</span>(j == <span class="number">-1</span> || x[i] == y[j]) &#123;</span><br><span class="line">      i++; j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> j = pre[j];</span><br><span class="line">    <span class="keyword">if</span>(j == nb) ans++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="keyword">sizeof</span>(x));</span><br><span class="line">    <span class="built_in">memset</span>(y, <span class="number">0</span>, <span class="keyword">sizeof</span>(y));</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a[i].x,&amp;a[i].y);</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; m; i++) <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;b[i].x,&amp;b[i].y);</span><br><span class="line">    conv1.clear(); conv2.clear();</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; n; i++) point[i] = a[i];</span><br><span class="line">    graham(n, conv1);</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; m; i++) point[i] = b[i];</span><br><span class="line">    graham(m, conv2);</span><br><span class="line">    <span class="keyword">if</span>(conv1.size() != conv2.size()) <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      na = conv1.size() * <span class="number">6</span>, nb = conv2.size() * <span class="number">3</span>;</span><br><span class="line">      <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; conv1.size(); i++) &#123;</span><br><span class="line">        x[i*<span class="number">3</span>] = dis(conv1[i],conv1[(i+<span class="number">1</span>)%conv1.size()]);</span><br><span class="line">        x[i*<span class="number">3</span>+<span class="number">1</span>] = cross(conv1[(i+<span class="number">1</span>)%conv1.size()],conv1[i],conv1[(i+<span class="number">2</span>)%conv1.size()]);</span><br><span class="line">        x[i*<span class="number">3</span>+<span class="number">2</span>] = dis(conv1[(i+<span class="number">1</span>)%conv1.size()],conv1[(i+<span class="number">2</span>)%conv1.size()]);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; x[i*3]&lt;&lt;" "&lt;&lt;x[i*3+1]&lt;&lt;" "&lt;&lt;x[i*3+2]&lt;&lt;" ";</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; conv1.size(); i++) &#123;</span><br><span class="line">        x[i*<span class="number">3</span>+na/<span class="number">2</span>] = x[i*<span class="number">3</span>];</span><br><span class="line">        x[i*<span class="number">3</span>+<span class="number">1</span>+na/<span class="number">2</span>] = x[i*<span class="number">3</span>+<span class="number">1</span>];</span><br><span class="line">        x[i*<span class="number">3</span>+<span class="number">2</span>+na/<span class="number">2</span>] = x[i*<span class="number">3</span>+<span class="number">2</span>];</span><br><span class="line">        <span class="comment">// cout &lt;&lt; x[i*3+na/2]&lt;&lt;" "&lt;&lt;x[i*3+1+na/2]&lt;&lt;" "&lt;&lt;x[i*3+2+na/2]&lt;&lt;" ";</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">      <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt; conv2.size(); i++) &#123;</span><br><span class="line">        y[i*<span class="number">3</span>] = dis(conv2[i],conv2[(i+<span class="number">1</span>)%conv2.size()]);</span><br><span class="line">        y[i*<span class="number">3</span>+<span class="number">1</span>] = cross(conv2[(i+<span class="number">1</span>)%conv2.size()],conv2[i],conv2[(i+<span class="number">2</span>)%conv2.size()]);</span><br><span class="line">        y[i*<span class="number">3</span>+<span class="number">2</span>] = dis(conv2[(i+<span class="number">1</span>)%conv2.size()],conv2[(i+<span class="number">2</span>)%conv2.size()]);</span><br><span class="line">        <span class="comment">// cout &lt;&lt; y[i*3]&lt;&lt;" "&lt;&lt;y[i*3+1]&lt;&lt;" "&lt;&lt;y[i*3+2]&lt;&lt;" ";</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">      LL ret = kmp();</span><br><span class="line">      <span class="keyword">if</span>(ret) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1017/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1017/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你两组点，问你这两组点的凸包是不是同构的。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="计算几何" scheme="https://vincentxwd.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
      <category term="凸包" scheme="https://vincentxwd.github.io/blog/tags/%E5%87%B8%E5%8C%85/"/>
    
      <category term="KMP" scheme="https://vincentxwd.github.io/blog/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1017A-D] Codeforces Round 502 (Div.1+Div.2)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/09/Codeforces1017A-D-Codeforces-Round-502-Div-1-Div-2/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/09/Codeforces1017A-D-Codeforces-Round-502-Div-1-Div-2/</id>
    <published>2018-08-08T17:31:42.000Z</published>
    <updated>2018-08-08T17:43:26.486Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1017" target="_blank" rel="noopener">http://codeforces.com/contest/1017</a></p><p><strong>这把肯定要上分的，结果因为服务器爆炸，unrated了好气。。</strong></p><a id="more"></a><p>A：太水了不多说。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> P = struct &#123;</span><br><span class="line">  <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">  <span class="keyword">int</span> s, id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">P p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; p[i].a&gt;&gt;p[i].b&gt;&gt;p[i].c&gt;&gt;p[i].d;</span><br><span class="line">      p[i].s = p[i].a+p[i].b+p[i].c+p[i].d;</span><br><span class="line">      p[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+n+<span class="number">1</span>, [](P a, P b) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.s == b.s ? a.id &lt; b.id : a.s &gt; b.s;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(p[i].id == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B：<strong>给你两个01串，要求你交换第一个串中的任意两个数，使得这两个串“或”操作后的结果和原始的不一样，问多少种换法。</strong></p><p>手写一下会发现导致变化的a、b串某一位置的组合是“10”（用0换掉第一个1）和“00”（用1换掉第一个0），我们统计这样的位置，以及0、1的出现次数，把这两种结果加起来，再减掉一次10和00出现的组合乘积就行了（因为10中的1和00中的0会多进行一次）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn];</span><br><span class="line">LL tot;</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    LL o = <span class="number">0</span>, z = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      vis[a[i]-<span class="string">'0'</span>]++;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="string">'1'</span>) o++;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="string">'0'</span>) z++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(vis[<span class="number">0</span>] == n || vis[<span class="number">1</span>] == n) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="string">'0'</span> &amp;&amp; b[i] == <span class="string">'0'</span>) x++;</span><br><span class="line">      <span class="keyword">if</span>(a[i] == <span class="string">'1'</span> &amp;&amp; b[i] == <span class="string">'0'</span>) y++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; o*x+z*y-x*y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C：<strong>构造一个长度为n排列，使得这个排列的LIS和LDS长度之和最小。</strong></p><p>遇事不决打个表：</p><p><img src="http://pcoln8jiu.bkt.clouddn.com/CF1017C.png" alt="img"></p><p>我们发现一个规律：当要构造长度为n的排列时，我们可以找到第一个比n大的平方数$k^2$，然后我们依次放入$k^2-k+1,…k^2-1,k^2,…,1,2,…,k$，当要放的数比n大的时候不输出就ok了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line">LL n, nn;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp, gen;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">    gen.clear();</span><br><span class="line">    LL nn = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(nn * nn &lt; n) nn++;</span><br><span class="line">    LL circle = nn;</span><br><span class="line">    nn = nn * nn;</span><br><span class="line">    LL del = nn - n;</span><br><span class="line">    <span class="keyword">while</span>(nn) &#123;</span><br><span class="line">      tmp.clear();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; circle; i++, nn--) tmp.emplace_back(nn);</span><br><span class="line">      reverse(tmp.begin(), tmp.end());</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> x : tmp) gen.emplace_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> x : gen) <span class="keyword">if</span>(x &lt;= n) <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打表代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    f[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] &gt; a[j]) f[i] = max(f[i], f[j]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ret = max(ret, f[i]);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    f[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a[i] &lt; a[j]) f[i] = max(f[i], f[j]+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ret = max(ret, f[i]);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) a[i] = i, b[i] = i;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      <span class="keyword">int</span> tmp = lis() + lds();</span><br><span class="line">      <span class="keyword">if</span>(tmp &lt;= ret) &#123;</span><br><span class="line">        ret = tmp;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d: "</span>, ret);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">          b[i] = a[i];</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"%d "</span>, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>, a+n+<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d: "</span>, ret);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D：<strong>两个01串有个匹配的价值，对应位相同的话就要加上那位的价值。给你一些询问串，问有多少串和它的匹配价值不超过k。</strong>  </p><p>这题n给的很小，考虑预处理出任意串和所给串的价值，然后统计当前串这个价值下的字符串数，维护一个前缀和，然后查询就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q;</span><br><span class="line"><span class="keyword">int</span> w[maxn];</span><br><span class="line"><span class="keyword">int</span> wu[<span class="number">4096</span>][<span class="number">4096</span>];</span><br><span class="line"><span class="keyword">int</span> ret[<span class="number">4096</span>][<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">500500</span>];</span><br><span class="line"><span class="keyword">char</span> tmp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">conv</span><span class="params">(<span class="keyword">char</span> *x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">  <span class="built_in">memset</span>(ret, <span class="number">0</span>, <span class="keyword">sizeof</span>(ret));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w[i]); </span><br><span class="line">  <span class="keyword">int</span> nn = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tmp);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      x += tmp[i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nn; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!vis[j]) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(((<span class="number">1</span>&lt;&lt;k)&amp;i) == ((<span class="number">1</span>&lt;&lt;k)&amp;j)) &#123;</span><br><span class="line">          tmp += w[n<span class="number">-1</span>-k];</span><br><span class="line">          <span class="keyword">if</span>(tmp &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(tmp &lt;= <span class="number">100</span>) ret[i][tmp] += vis[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nn; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">100</span>; k++) &#123;</span><br><span class="line">      ret[i][k] += ret[i][k<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,tmp,&amp;k);</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">      x += tmp[i] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret[x][k]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1017&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这把肯定要上分的，结果因为服务器爆炸，unrated了好气。。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/Codeforces/"/>
    
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
      <category term="构造" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="预处理" scheme="https://vincentxwd.github.io/blog/tags/%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoderARC100D] Equal Cut (枚举, 二分)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/08/AtCoderARC100D-Equal-Cut-%E6%9E%9A%E4%B8%BE-%E4%BA%8C%E5%88%86/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/08/AtCoderARC100D-Equal-Cut-枚举-二分/</id>
    <published>2018-08-07T17:00:12.000Z</published>
    <updated>2018-08-07T17:03:45.746Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://arc100.contest.atcoder.jp/tasks/arc100_b" target="_blank" rel="noopener">https://arc100.contest.atcoder.jp/tasks/arc100_b</a></p><p><strong>给你n个数，要求你不改变顺序将这n个数字切分成4段，问四段中各段求和后最大和与最小和之间的差</strong></p><a id="more"></a><p>切三刀，可以首先枚举中间拿刀，然后再在两边分别二分各自的那一刀，让各自拆分成的两个集合的和的差值最小，这样才能保证整体的差值最小。这题对我来说挺难写的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; a, s;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">gao</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">1E18</span>, tmp = <span class="number">1E18</span>;</span><br><span class="line">  <span class="keyword">int</span> lo = <span class="number">1</span>, hi = id, s1 = <span class="number">1</span>, s2 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="number">1E18</span> || tmp &gt; (LL)<span class="built_in">abs</span>(s[id]-s[mid]-s[mid])) &#123;</span><br><span class="line">      tmp = (LL)<span class="built_in">abs</span>(s[id]-s[mid]-s[mid]);</span><br><span class="line">      s1 = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[id]-s[mid]&lt;s[mid]) hi = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  lo = id + <span class="number">1</span>, hi = n, tmp = <span class="number">1E18</span>;</span><br><span class="line">  <span class="keyword">while</span>(lo &lt;= hi) &#123;</span><br><span class="line">    <span class="keyword">int</span> mid = (lo + hi) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(tmp == <span class="number">1E18</span> || tmp &gt; (LL)<span class="built_in">abs</span>(s[n]-s[mid]-(s[mid]-s[id]))) &#123;</span><br><span class="line">      tmp = (LL)<span class="built_in">abs</span>(s[n]-s[mid]-(s[mid]-s[id]));</span><br><span class="line">      s2 = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s[n]-s[mid]&lt;s[mid]-s[id]) hi = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> lo = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LL L = min(&#123;s[s1], s[id]-s[s1], s[s2]-s[id], s[n]-s[s2]&#125;);</span><br><span class="line">  LL R = max(&#123;s[s1], s[id]-s[s1], s[s2]-s[id], s[n]-s[s2]&#125;);</span><br><span class="line">  ret = min(ret, R-L);</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">    a.resize(n+<span class="number">1</span>); s.resize(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">      s[i] = s[i<span class="number">-1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    LL ret = <span class="number">1E18</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      ret = min(ret, gao(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ret &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://arc100.contest.atcoder.jp/tasks/arc100_b" target="_blank" rel="noopener">https://arc100.contest.atcoder.jp/tasks/arc100_b</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://arc100.contest.atcoder.jp/tasks/arc100_b&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://arc100.contest.atcoder.jp/tasks/arc100_b&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你n个数，要求你不改变顺序将这n个数字切分成4段，问四段中各段求和后最大和与最小和之间的差&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="AtCoder" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/AtCoder/"/>
    
    
      <category term="枚举" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="二分" scheme="https://vincentxwd.github.io/blog/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>[POJ3744] Scout YYF I（概率, DP, 矩阵优化）</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/07/POJ3744-Scout-YYF-I%EF%BC%88%E6%A6%82%E7%8E%87-DP-%E7%9F%A9%E9%98%B5%E4%BC%98%E5%8C%96%EF%BC%89/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/07/POJ3744-Scout-YYF-I（概率-DP-矩阵优化）/</id>
    <published>2018-08-07T15:08:37.000Z</published>
    <updated>2018-08-07T15:17:10.568Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://cn.vjudge.net/problem/POJ-3744" target="_blank" rel="noopener">https://cn.vjudge.net/problem/POJ-3744</a></p><p><strong>一个人在一条线上走，线上有n个点有地雷，这个人每次有一定概率$p$走一步，也有$1-p$的概率跳两步。问这个人不踩地雷的概率是多少</strong>。</p><a id="more"></a><p>我们根据题意能推出递推式：$f(i)$表示走到$i$处的概率为多少。$f(1)=1$，$f(i)=p×f(i-1)+(1-p)×f(i-2)$。</p><p>由于线很长，但是地雷很少。我们观察这个递推式是线性的，于是可以用矩阵快速幂优化，构造矩阵：<br>$$<br>\begin{pmatrix}f(n)\f(n-1)\end{pmatrix}=\begin{pmatrix}p&amp;1-p\1&amp;0\end{pmatrix}\begin{pmatrix}f(n-1)\f(n-2)\end{pmatrix}<br>$$<br>对于每一个雷的位置进行分段，计算到那个地方不踩中的概率，递推所有段走到雷处不中的概率，用乘法原理就能求出来结果了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  <span class="keyword">double</span> m[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line">&#125;Matrix;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix a, Matrix b)</span> </span>&#123;</span><br><span class="line">  Matrix ret;</span><br><span class="line">  <span class="built_in">memset</span>(ret.m, <span class="number">0</span>, <span class="keyword">sizeof</span>(ret.m));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b.m[j][k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        ret.m[i][k] += a.m[i][j] * b.m[j][k];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">M</span><span class="params">(Matrix a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  Matrix ret;</span><br><span class="line">  <span class="built_in">memset</span>(ret.m, <span class="number">0</span>, <span class="keyword">sizeof</span>(ret.m));</span><br><span class="line">  ret.m[<span class="number">0</span>][<span class="number">0</span>] = ret.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  Matrix tmp = a;</span><br><span class="line">  <span class="keyword">while</span>(n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ret = mul(ret, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    tmp = mul(tmp, tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">cin</span> &gt;&gt; x[i];</span><br><span class="line">    sort(x, x+n);</span><br><span class="line">    Matrix ret;</span><br><span class="line">    <span class="keyword">double</span> tot = <span class="number">1.0</span>;</span><br><span class="line">    Matrix p;</span><br><span class="line">    p.m[<span class="number">0</span>][<span class="number">0</span>] = q, p.m[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">1</span>-q;</span><br><span class="line">    p.m[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>, p.m[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    ret = M(p, x[<span class="number">0</span>]<span class="number">-1</span>);</span><br><span class="line">    tot *= (<span class="number">1</span> - ret.m[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(x[i] == x[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">      ret = M(p, x[i]-x[i<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">      tot *= (<span class="number">1</span> - ret.m[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.7f\n"</span>, tot);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://cn.vjudge.net/problem/POJ-3744&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cn.vjudge.net/problem/POJ-3744&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个人在一条线上走，线上有n个点有地雷，这个人每次有一定概率$p$走一步，也有$1-p$的概率跳两步。问这个人不踩地雷的概率是多少&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
      <category term="概率" scheme="https://vincentxwd.github.io/blog/tags/%E6%A6%82%E7%8E%87/"/>
    
      <category term="矩阵快速幂" scheme="https://vincentxwd.github.io/blog/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoderSoundHound18D] Saving Snuuk （最短路）</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/07/AtCoderSoundHound18D-Saving-Snuuk-%EF%BC%88%E6%9C%80%E7%9F%AD%E8%B7%AF%EF%BC%89/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/07/AtCoderSoundHound18D-Saving-Snuuk-（最短路）/</id>
    <published>2018-08-07T12:04:40.000Z</published>
    <updated>2018-08-07T15:08:55.971Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://soundhound2018-summer-qual.contest.atcoder.jp/tasks/soundhound2018_summer_qual_d" target="_blank" rel="noopener">https://soundhound2018-summer-qual.contest.atcoder.jp/tasks/soundhound2018_summer_qual_d</a></p><p><strong>有n个城市，一个人从s出发到t。手里一开始有1E15日元，现在有两种货币，这个人只能将日元兑换成另一种货币，并且是全部兑换。每到一个城市，这人就会在该城市呆一年。城市之间有火车，火车票价格是$a_i$yen或$b_i$snuuk，在每一个城市$i$，第$i$年的时候可以在该城市将yen兑换成snuuk。现在希望让这人剩的snuuk最多，问这人在1~n年内剩最多为多少snuuk。</strong></p><a id="more"></a><p>我们首先关注火车票的花费，希望snuuk剩的最多，只有在买火车票时才会花费，因此直接将火车票花费最小化就可以。</p><p>我们做两次最短路：$s$到各点，使用yen做货币，价格为$d1_i$；$t$到各点，使用snuuk做货币，价格为$d2_i$。这样我们可以获得每一个点的总计花费就是$d1_i+d2_i$。</p><p>然后再考虑每一年，这人要在每一个城市呆最少一年，最长无限。那么按照城市的兑换开始时间倒着扫一遍，用年份多的剩的多的更新前几年的就可以了。</p><p>（流下了不会写C++的眼泪）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pli = pair&lt;LL, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">using</span> Edge = tuple&lt;<span class="keyword">int</span>, LL, LL&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, s, t;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; d1, d2;</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; ret;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;Edge&gt;&gt; G;</span><br><span class="line">priority_queue&lt;pli, <span class="built_in">vector</span>&lt;pli&gt;, greater&lt;pli&gt;&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) pq.pop();</span><br><span class="line">  d1[s] = <span class="number">0</span>; pq.emplace(<span class="number">0</span>, s);</span><br><span class="line">  <span class="keyword">int</span> u, v;</span><br><span class="line">  LL w, tw;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">    tie(tw, u) = pq.top(); pq.pop();</span><br><span class="line">    <span class="keyword">if</span>(d1[u] &lt; tw) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> edge : G[u]) &#123;</span><br><span class="line">      tie(v, w, ignore) = edge;</span><br><span class="line">      <span class="keyword">if</span>(d1[v] &gt; d1[u] + w) &#123;</span><br><span class="line">        d1[v] = d1[u] + w;</span><br><span class="line">        pq.emplace(d1[v], v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) pq.pop();</span><br><span class="line">  d2[t] = <span class="number">0</span>; pq.emplace(<span class="number">0</span>, t);</span><br><span class="line">  <span class="keyword">int</span> u, v;</span><br><span class="line">  LL w, tw;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">    tie(tw, u) = pq.top(); pq.pop();</span><br><span class="line">    <span class="keyword">if</span>(d2[u] &lt; tw) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> edge : G[u]) &#123;</span><br><span class="line">      tie(v, ignore, w) = edge;</span><br><span class="line">      <span class="keyword">if</span>(d2[v] &gt; d2[u] + w) &#123;</span><br><span class="line">        d2[v] = d2[u] + w;</span><br><span class="line">        pq.emplace(d2[v], v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> u, v;</span><br><span class="line">  LL a, b;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; s &gt;&gt; t) &#123;</span><br><span class="line">    G.resize(n+<span class="number">1</span>); ret.resize(n+<span class="number">1</span>);</span><br><span class="line">    d1.resize(n+<span class="number">1</span>); d1.assign(d1.size(), numeric_limits&lt;LL&gt;::max());</span><br><span class="line">    d2.resize(n+<span class="number">1</span>); d2.assign(d2.size(), numeric_limits&lt;LL&gt;::max());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; a &gt;&gt; b;</span><br><span class="line">      G[u].emplace_back(v, a, b);</span><br><span class="line">      G[v].emplace_back(u, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    gao1(); gao2();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) ret[i] = d1[i] + d2[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">1</span>; i--) ret[i] = min(ret[i], ret[i+<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; (LL)<span class="number">1E15</span> - ret[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://soundhound2018-summer-qual.contest.atcoder.jp/tasks/soundhound2018_summer_qual_d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://soundhound2018-summer-qual.contest.atcoder.jp/tasks/soundhound2018_summer_qual_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有n个城市，一个人从s出发到t。手里一开始有1E15日元，现在有两种货币，这个人只能将日元兑换成另一种货币，并且是全部兑换。每到一个城市，这人就会在该城市呆一年。城市之间有火车，火车票价格是$a_i$yen或$b_i$snuuk，在每一个城市$i$，第$i$年的时候可以在该城市将yen兑换成snuuk。现在希望让这人剩的snuuk最多，问这人在1~n年内剩最多为多少snuuk。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="AtCoder" scheme="https://vincentxwd.github.io/blog/categories/%E9%A2%98%E8%A7%A3/AtCoder/"/>
    
    
      <category term="最短路" scheme="https://vincentxwd.github.io/blog/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
</feed>

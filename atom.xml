<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kirai</title>
  
  <subtitle>我好菜啊 QAQ | I Good Vegetable A QAQ</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://vincentxwd.github.io/blog/"/>
  <updated>2018-08-06T14:58:17.793Z</updated>
  <id>https://vincentxwd.github.io/blog/</id>
  
  <author>
    <name>Kirai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[HDOJ6351] 18多校05 Beautiful Now (暴力，全排列，置换群)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/06/HDOJ6351-18%E5%A4%9A%E6%A0%A105-Beautiful-Now-%E6%9A%B4%E5%8A%9B%EF%BC%8C%E5%85%A8%E6%8E%92%E5%88%97%EF%BC%8C%E7%BD%AE%E6%8D%A2%E7%BE%A4/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/06/HDOJ6351-18多校05-Beautiful-Now-暴力，全排列，置换群/</id>
    <published>2018-08-06T14:55:40.000Z</published>
    <updated>2018-08-06T14:58:17.793Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6351" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6351</a></p><p><strong>给你一个数字$n$和交换次数$k$，问你最多交换$k$次，这个数最大能变为多大，最小能变为多小。</strong></p><a id="more"></a><p>暴力枚举这个数字的全排列，然后计算和之前数字之间的交换次数。用置换的方法，总计的最少交换次数为所有环的长度-1的和。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; perm[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= <span class="number">9</span>; t++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">      a[i] = i;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">        now = now * <span class="number">10</span> + a[i];</span><br><span class="line">      <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">        <span class="keyword">if</span>(vis[i] != now)</span><br><span class="line">        &#123;</span><br><span class="line">          vis[i] = now;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> j = a[i]; j != i; j = a[j])</span><br><span class="line">          &#123;</span><br><span class="line">            vis[j] = now;</span><br><span class="line">            tmp++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      perm[t][tmp].push_back(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(next_permutation(a + <span class="number">1</span>, a + t + <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">apply</span><span class="params">(<span class="keyword">int</span> mask)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> tmp = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(mask)</span><br><span class="line">  &#123;</span><br><span class="line">    ret += a[mask % <span class="number">10</span>] * tmp;</span><br><span class="line">    mask /= <span class="number">10</span>;</span><br><span class="line">    tmp *= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> t, k, mn, mx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, n, &amp;k);</span><br><span class="line">  t = <span class="built_in">strlen</span>(n);</span><br><span class="line">  <span class="keyword">if</span>(t == <span class="number">10</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1000000000 1000000000\n"</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(k &gt;= t)</span><br><span class="line">    k = t - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++)</span><br><span class="line">    a[i] = n[i - <span class="number">1</span>] - <span class="string">'0'</span>;</span><br><span class="line">  mn = <span class="number">1000000000</span>;</span><br><span class="line">  mx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> lj = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; t; i++)</span><br><span class="line">    lj *= <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = perm[t][i].begin(); it != perm[t][i].end(); it++)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">int</span> now = apply(*it);</span><br><span class="line">      <span class="keyword">if</span>(now &lt; lj)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      now &lt; mn ? mn = now : <span class="number">0</span>;</span><br><span class="line">      now &gt; mx ? mx = now : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, mn, mx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  init();</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> t1 = <span class="number">1</span>; t1 &lt;= T; t1++)</span><br><span class="line">    solve();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6351&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6351&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你一个数字$n$和交换次数$k$，问你最多交换$k$次，这个数最大能变为多大，最小能变为多小。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="暴力" scheme="https://vincentxwd.github.io/blog/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="置换群" scheme="https://vincentxwd.github.io/blog/tags/%E7%BD%AE%E6%8D%A2%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6354] 18多校05 Everything Has Changed (计算几何)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/06/HDOJ6354-18%E5%A4%9A%E6%A0%A105-Everything-Has-Changed-%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/06/HDOJ6354-18多校05-Everything-Has-Changed-计算几何/</id>
    <published>2018-08-06T14:51:21.000Z</published>
    <updated>2018-08-06T14:54:06.459Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6354" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6354</a></p><p><strong>给你一个圆和互不相交的n个小圆，让你计算这个大圆被n个小圆切割后的周长，大圆内部的不计算。</strong></p><a id="more"></a><p>很容易发现小圆和大圆相交以后，周长增加了小圆的弧长-大圆的弧长。用余弦定理计算一下大小圆关于交处的角度，然后用弧长公式算一下即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">double</span> x, y, r;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line">Node p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dis</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">double</span>)<span class="built_in">sqrt</span>((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gao</span><span class="params">(Node a, Node b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b.x &lt; <span class="number">0</span>) b.x = -b.x;</span><br><span class="line">  <span class="keyword">if</span>(b.y &lt; <span class="number">0</span>) b.y = -b.y;</span><br><span class="line">  <span class="keyword">double</span> d = dis(a, b);</span><br><span class="line">  <span class="keyword">double</span> theta1 = <span class="number">2.0</span> * <span class="built_in">acos</span>((d*d+a.r*a.r-b.r*b.r)/(<span class="number">2</span>*d*a.r));</span><br><span class="line">  <span class="keyword">double</span> theta2 = <span class="number">2.0</span> * <span class="built_in">acos</span>((d*d+b.r*b.r-a.r*a.r)/(<span class="number">2</span>*d*b.r));</span><br><span class="line">  <span class="keyword">double</span> L1 = theta1 * a.r;</span><br><span class="line">  <span class="keyword">double</span> L2 = theta2 * b.r;</span><br><span class="line">  <span class="keyword">return</span> L2 - L1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T, _ = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; p[i].x &gt;&gt; p[i].y &gt;&gt; p[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> ret = <span class="number">2</span> * pi * r;</span><br><span class="line">    Node o = &#123;<span class="number">0</span>, <span class="number">0</span>, r&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">double</span> d = dis(o, p[i]);</span><br><span class="line">      <span class="keyword">double</span> R = o.r, r = p[i].r;</span><br><span class="line">      <span class="keyword">if</span>(d &gt;= R + r) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span>(d == R - r) &#123;</span><br><span class="line">        ret += p[i].r * pi * <span class="number">2.0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(R - r &lt; d &amp;&amp; d &lt; R + r) &#123;</span><br><span class="line">        ret += gao(o, p[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.15f\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6354&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6354&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你一个圆和互不相交的n个小圆，让你计算这个大圆被n个小圆切割后的周长，大圆内部的不计算。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="计算几何" scheme="https://vincentxwd.github.io/blog/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoderABC103D] Islands War (贪心，思维)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/06/AtCoderABC103D-Islands-War-%E8%B4%AA%E5%BF%83%EF%BC%8C%E6%80%9D%E7%BB%B4/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/06/AtCoderABC103D-Islands-War-贪心，思维/</id>
    <published>2018-08-06T09:55:41.000Z</published>
    <updated>2018-08-06T10:11:35.396Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://abc103.contest.atcoder.jp/tasks/abc103_d" target="_blank" rel="noopener">https://abc103.contest.atcoder.jp/tasks/abc103_d</a></p><p><strong>有n个岛练成一条线，每两个岛之间有一个桥。现在有m个岛之间发生了冲突，发生冲突的岛就不能连通了，问最少要切断几座桥？</strong></p><a id="more"></a><p>这题很有意思，贪心地去考虑，希望切到的边影响尽可能地大，可以考虑贪心地将发生冲突的右端点从小到大排，然后从左到右开始切。</p><p>可以反证一下：假如选中的某次冲突的右端点不是最优的解，那么可能存在一个在此点左侧的点待切，显然存在的左侧点不是最优点，因为左侧已经统计完将此点之前发生冲突的点对分割开的桥数，再添加一条是冗余的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">using</span> pii = pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line">pii p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].first,&amp;p[i].second);</span><br><span class="line">      <span class="keyword">if</span>(p[i].first &gt; p[i].second) swap(p[i].first, p[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+m+<span class="number">1</span>, [](pii x, pii y)&#123;</span><br><span class="line">      <span class="keyword">if</span>(x.second != y.second) <span class="keyword">return</span> x.second &lt; y.second;</span><br><span class="line">      <span class="keyword">return</span> x.first &lt; y.first;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = p[<span class="number">1</span>].second;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(pre &gt; p[i].first) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        tot++;</span><br><span class="line">        pre = p[i].second;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://abc103.contest.atcoder.jp/tasks/abc103_d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://abc103.contest.atcoder.jp/tasks/abc103_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;有n个岛练成一条线，每两个岛之间有一个桥。现在有m个岛之间发生了冲突，发生冲突的岛就不能连通了，问最少要切断几座桥？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AtCoder" scheme="https://vincentxwd.github.io/blog/categories/AtCoder/"/>
    
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="思维" scheme="https://vincentxwd.github.io/blog/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoderABC104D] We Love ABC (DP, 计数)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/06/AtCoderABC104D-We-Love-ABC-DP-%E8%AE%A1%E6%95%B0/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/06/AtCoderABC104D-We-Love-ABC-DP-计数/</id>
    <published>2018-08-06T03:16:29.000Z</published>
    <updated>2018-08-06T03:20:05.490Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://abc104.contest.atcoder.jp/tasks/abc104_d" target="_blank" rel="noopener">https://abc104.contest.atcoder.jp/tasks/abc104_d</a></p><p><strong>给一个只含有ABC?四种字符的字符串，?可以替换成ABC中的任意一个字符，现在要你统计所有的ABC的组合个数。</strong></p><a id="more"></a><p><em>这题比赛时间内写搓了，因为误读了题目的统计结果，比如?ABC，答案应该是4（AABC BABC CABC）。</em></p><p>我们可以考虑枚举B的位置，并以这个B为链接，那么问题就变成了统计左侧A的个数和右侧C的个数。这里也不能是简单地将左右两侧的A?和C?的个数乘起来，因为固定了某一对A、C后其他字符的变化也是要算作不同组合的。<br>我们将每一个B的位置的计数结果拆成四项来统计，即：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A、B、C</span><br><span class="line">?、B、C</span><br><span class="line">A、B、?</span><br><span class="line">?、B、?</span><br></pre></td></tr></table></figure><p>第一项很好统计，由于不存在?所以可以直接计数。<br>第二、三项的本质是相同的，我们在B的某一侧存在?时，要枚举任意一个?（让这个?作为A或C出现），那么其他位置的?则是任意的，那么每一个位置对答案的贡献是$3^{k-1}$，其中$k$为?的左侧或右侧总数。<br>第四项和第二、三项也是一样的，但是要在左右两边各取一个?，假设左侧有$x_1$个?，右侧有$x_2$个?，那么计数结果为$3^{x_1-1}×3^{x_2-1}$，整理为$3^{x_1+x_2-2}$。<br>这样我们就推出了每一个B对总体答案的分步贡献，我们维护A、C、?出现次数的前缀和，之后就可以分类讨论了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line">LL mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line">LL f[maxn][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">mul</span><span class="params">(LL x, LL n)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span>(n) &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      ret *= x; ret %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    x *= x; x %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    n = <span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      f[i][<span class="number">0</span>] = f[i<span class="number">-1</span>][<span class="number">0</span>] + (s[i] == <span class="string">'A'</span>);</span><br><span class="line">      f[i][<span class="number">1</span>] = f[i<span class="number">-1</span>][<span class="number">1</span>] + (s[i] == <span class="string">'C'</span>);</span><br><span class="line">      f[i][<span class="number">2</span>] = f[i<span class="number">-1</span>][<span class="number">2</span>] + (s[i] == <span class="string">'?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    LL ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[i] == <span class="string">'B'</span> || s[i] == <span class="string">'?'</span>) &#123;</span><br><span class="line">        LL q = f[n][<span class="number">2</span>] - (s[i] == <span class="string">'?'</span>);</span><br><span class="line">        ret += mul(<span class="number">3L</span>L, q) * (f[i<span class="number">-1</span>][<span class="number">0</span>] * (f[n][<span class="number">1</span>] - f[i][<span class="number">1</span>]) % mod);</span><br><span class="line">        ret %= mod;</span><br><span class="line">        <span class="keyword">if</span>(q &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">          ret += mul(<span class="number">3L</span>L, q<span class="number">-1</span>) * (f[i<span class="number">-1</span>][<span class="number">0</span>] * (f[n][<span class="number">2</span>] - f[i][<span class="number">2</span>]) % mod);</span><br><span class="line">          ret %= mod;</span><br><span class="line">          ret += mul(<span class="number">3L</span>L, q<span class="number">-1</span>) * (f[i<span class="number">-1</span>][<span class="number">2</span>] * (f[n][<span class="number">1</span>] - f[i][<span class="number">1</span>]) % mod);</span><br><span class="line">          ret %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">          ret += mul(<span class="number">3L</span>L, q<span class="number">-2</span>) * (f[i<span class="number">-1</span>][<span class="number">2</span>] * (f[n][<span class="number">2</span>] - f[i][<span class="number">2</span>]) % mod);</span><br><span class="line">          ret %= mod;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://abc104.contest.atcoder.jp/tasks/abc104_d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://abc104.contest.atcoder.jp/tasks/abc104_d&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给一个只含有ABC?四种字符的字符串，?可以替换成ABC中的任意一个字符，现在要你统计所有的ABC的组合个数。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="AtCoder" scheme="https://vincentxwd.github.io/blog/categories/AtCoder/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[2018百度之星] 资格赛1003 整数规划 (最大匹配)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/05/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E8%B5%84%E6%A0%BC%E8%B5%9B1003-%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92-%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/05/2018百度之星-资格赛1003-整数规划-最大匹配/</id>
    <published>2018-08-05T14:09:51.000Z</published>
    <updated>2018-08-06T03:27:10.007Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1003" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1003</a></p><a id="more"></a><p>希望最大化目标函数，事实上满足 Kuhn–Munkres algorithm 求解最小权匹配过程中的顶标的定义，现在就是要计算最大顶标和，而这正好就是最小权匹配 ，按照$x_i$和$y_i$给定的约束条件连边，同时边权置为负值。然后跑最大匹配，输出结果的相反数。</p><p>这题一般的KM算法是过不了的，因为网上流传的KM代码都到不了$O(n^3)$。于是去UOJ上扒了一份KM模版……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">405</span>;</span><br><span class="line"><span class="keyword">int</span> w[N][N];</span><br><span class="line"><span class="keyword">int</span> lx[N], ly[N];</span><br><span class="line"><span class="keyword">int</span> lmatch[N], rmatch[N];</span><br><span class="line"><span class="keyword">bool</span> lvis[N], rvis[N];</span><br><span class="line"><span class="keyword">int</span> slack[N];</span><br><span class="line"><span class="keyword">int</span> pre[N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dt = INF, ru;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        <span class="keyword">if</span> (!rvis[j] &amp;&amp; slack[j] &lt; dt) &#123;</span><br><span class="line">            dt = slack[j];</span><br><span class="line">            ru = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (lvis[i]) lx[i] -= dt;</span><br><span class="line">        <span class="keyword">if</span> (rvis[i])</span><br><span class="line">            ly[i] += dt;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            slack[i] -= dt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ru;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">match</span><span class="params">(<span class="keyword">int</span>&amp; u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (; u; swap(u, lmatch[pre[u]])) rmatch[u] = pre[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(u);</span><br><span class="line">    lvis[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">1</span>; v &lt;= n; ++v) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp;</span><br><span class="line">                <span class="keyword">if</span> (rvis[v] || (tmp = lx[u] + ly[v] - w[u][v]) &gt; slack[v])</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                pre[v] = u;</span><br><span class="line">                <span class="keyword">if</span> (!tmp) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!rmatch[v]) <span class="keyword">return</span> match(v);</span><br><span class="line">                    rvis[v] = lvis[rmatch[v]] = <span class="literal">true</span>;</span><br><span class="line">                    q.push(rmatch[v]);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    slack[v] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        u = update(n);</span><br><span class="line">        <span class="keyword">if</span> (!rmatch[u]) <span class="keyword">return</span> match(u);</span><br><span class="line">        rvis[u] = lvis[rmatch[u]] = <span class="literal">true</span>;</span><br><span class="line">        q.push(rmatch[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">KM</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        lmatch[i] = rmatch[i] = lx[i] = ly[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            lx[i] = max(lx[i], w[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            slack[j] = INF;</span><br><span class="line">            lvis[j] = rvis[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bfs(i, n);</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        res += lx[i] + ly[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T_T, _ = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T_T);</span><br><span class="line">  <span class="keyword">while</span>(T_T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="keyword">sizeof</span>(w));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i][j]);</span><br><span class="line">        w[i][j] = -w[i][j];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %I64d\n"</span>, ++_, -KM(n));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1003&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1003&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="匹配问题" scheme="https://vincentxwd.github.io/blog/tags/%E5%8C%B9%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>[2018百度之星] 资格赛1005 序列计数 (DP, 树状数组, 随机)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/05/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E8%B5%84%E6%A0%BC%E8%B5%9B1005-%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0-DP-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-%E9%9A%8F%E6%9C%BA/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/05/2018百度之星-资格赛1005-序列计数-DP-树状数组-随机/</id>
    <published>2018-08-05T03:34:48.000Z</published>
    <updated>2018-08-05T03:50:30.238Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1005" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1005</a></p><p><strong>这题随机给你一个1~n的排列，要你统计这1~n的排列中长度为1~n的上升子序列的个数分别是多少。</strong></p><a id="more"></a><p>由于数据是随机的，因此这个序列中的LIS满足下面这个工作：</p><p><img src="http://pcoln8jiu.bkt.clouddn.com/2018astar1005.jpg" alt="img"></p><p>LIS的长度大概是$2\sqrt{N}$，当$N=10000$时，LIS的最长长度大约为$200$。</p><p>我们很容易就推出LIS的计数公式：<br>$$<br>f(i,k) += (p_i &gt; p_j)? f(j,k-1) : 0<br>$$<br>可以考虑枚举LIS的长度$l$，用bit维护到第$i$个位置的数字$p[i]$、长度为$l-1$的上升子序列的总数，这样每次扫一个位置的时候，就可以直接查前缀和了。</p><p>由于要更新bit，所以维护一个滚动的dp数组，在查询长度为$l-1$的计数结果的同时，更新答案以及$l$的计数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> LL maxn = <span class="number">10100</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">LL n;</span><br><span class="line">LL p[maxn];</span><br><span class="line">LL bit[maxn];</span><br><span class="line">LL f[<span class="number">2</span>][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lowbit</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(LL x, LL val)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(LL i = x; i &lt;= n; i+=lowbit(i)) &#123;</span><br><span class="line">    bit[i] += val; bit[i] %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">  LL ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(LL i = x; i; i-=lowbit(i)) &#123;</span><br><span class="line">    ret += bit[i];</span><br><span class="line">    ret %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  LL T, _ = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%I64d"</span>,&amp;p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">    LL x = <span class="number">0</span>, flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i++) f[<span class="number">0</span>][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%I64d:"</span>, ++_);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %I64d"</span>, n);</span><br><span class="line">    <span class="keyword">for</span>(LL l = <span class="number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line">      x = !x;</span><br><span class="line">      LL ret = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(bit, <span class="number">0</span>, <span class="keyword">sizeof</span>(bit));</span><br><span class="line">        <span class="keyword">for</span>(LL i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">          f[x][i] = sum(p[i] - <span class="number">1</span>);</span><br><span class="line">          ret += f[x][i]; ret %= mod;</span><br><span class="line">          add(p[i], f[!x][i]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(ret == <span class="number">0</span>) flag = <span class="number">0</span>;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">" %I64d"</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1005&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1005&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这题随机给你一个1~n的排列，要你统计这1~n的排列中长度为1~n的上升子序列的个数分别是多少。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="树状数组" scheme="https://vincentxwd.github.io/blog/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[2018百度之星] 资格赛1006 三原色图 (最小生成树)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/05/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E8%B5%84%E6%A0%BC%E8%B5%9B1006-%E4%B8%89%E5%8E%9F%E8%89%B2%E5%9B%BE-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/05/2018百度之星-资格赛1006-三原色图-最小生成树/</id>
    <published>2018-08-04T16:37:14.000Z</published>
    <updated>2018-08-04T16:47:10.383Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1006" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1006</a></p><a id="more"></a><p>这题很简单，按照RG、BG的组合分别跑最小生成树，假如某一种情况无法构造出则抛弃那一种情况。同时给边打标记，最后再取k-(n+1)条最短的未添加到生成树里的边就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> id, u, v, w;</span><br><span class="line">  <span class="keyword">char</span> c;</span><br><span class="line">  <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node a, Node b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a.w &gt; b.w;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, eid;</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; G[maxn];</span><br><span class="line">priority_queue&lt;Node&gt; pq;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = find(x); y = find(y);</span><br><span class="line">  <span class="keyword">if</span> (x != y) &#123;</span><br><span class="line">    pre[y] = x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; gao1(<span class="keyword">int</span> k) &#123;</span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] = i;</span><br><span class="line">  <span class="keyword">while</span> (!pq.empty()) pq.pop();</span><br><span class="line">  <span class="keyword">int</span> tot = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(G[i][j].c == <span class="string">'R'</span> || G[i][j].c == <span class="string">'G'</span>) &#123;</span><br><span class="line">        pq.push(G[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">    Node p = pq.top(); pq.pop();</span><br><span class="line">    <span class="keyword">if</span>(unite(p.u, p.v)) &#123;</span><br><span class="line">      tot++;</span><br><span class="line">      ret += p.w;</span><br><span class="line">      vis[p.id] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!vis[G[i][j].id]) pq.push(G[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    ret += pq.top().w; pq.pop(); pq.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> make_pair(ret, tot == n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; gao2(<span class="keyword">int</span> k) &#123;</span><br><span class="line">  <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; maxn; i++) pre[i] = i;</span><br><span class="line">  <span class="keyword">while</span> (!pq.empty()) pq.pop();</span><br><span class="line">  <span class="keyword">int</span> tot = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(G[i][j].c == <span class="string">'B'</span> || G[i][j].c == <span class="string">'G'</span>) &#123;</span><br><span class="line">        pq.push(G[i][j]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">    Node p = pq.top(); pq.pop();</span><br><span class="line">    <span class="keyword">if</span>(unite(p.u, p.v)) &#123;</span><br><span class="line">      tot++;</span><br><span class="line">      ret += p.w;</span><br><span class="line">      vis[p.id] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; G[i].size(); j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!vis[G[i][j].id]) pq.push(G[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k - n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">    ret += pq.top().w; pq.pop(); pq.pop();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> make_pair(ret, tot == n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T, _ = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> u, v, w;</span><br><span class="line">  <span class="keyword">char</span> c[<span class="number">5</span>];</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    eid = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d%d%s"</span>,&amp;u,&amp;v,&amp;w,c);</span><br><span class="line">      G[u].push_back(&#123;eid, u, v, w, c[<span class="number">0</span>]&#125;);</span><br><span class="line">      G[v].push_back(&#123;eid++, v, u, w, c[<span class="number">0</span>]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    pair&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; tmp;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, ++_);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m; k++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(k &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> ret = <span class="number">0x7f7f7f7f</span>;</span><br><span class="line">      tmp = gao1(k);</span><br><span class="line">      <span class="keyword">if</span>(tmp.second) &#123;</span><br><span class="line">        ret = min(ret, tmp.first);</span><br><span class="line">      &#125;</span><br><span class="line">      tmp = gao2(k);</span><br><span class="line">      <span class="keyword">if</span>(tmp.second) &#123;</span><br><span class="line">        ret = min(ret, tmp.first);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(ret == <span class="number">0x7f7f7f7f</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1006&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1006&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="最小生成树" scheme="https://vincentxwd.github.io/blog/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>[2018百度之星] 资格赛1001 调查问卷 (状压枚举, 计数)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/05/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F-%E8%B5%84%E6%A0%BC%E8%B5%9B1001-%E8%B0%83%E6%9F%A5%E9%97%AE%E5%8D%B7-%E7%8A%B6%E5%8E%8B%E6%9E%9A%E4%B8%BE-%E8%AE%A1%E6%95%B0/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/05/2018百度之星-资格赛1001-调查问卷-状压枚举-计数/</id>
    <published>2018-08-04T16:36:08.000Z</published>
    <updated>2018-08-04T16:44:42.074Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1001" target="_blank" rel="noopener">http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;pid=1001</a></p><a id="more"></a><p>没啥好解释的，中文题意。</p><p>因为题目最多10道，因此枚举所有题目的组合，然后把每一份问卷的对应答案存出来，对每一类单独统计数目。之后每一类中的问卷答案数$k$与其他问卷答案成的对数为$p×(n-p)$，累加所有问卷答案对数再除以2，跟目标k比较一下就ok。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">char</span> s[maxn][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> cur[maxn][<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> f[maxn];</span><br><span class="line"><span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T, _ = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mm = <span class="number">1</span> &lt;&lt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mm; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> qq = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &amp; (<span class="number">1</span> &lt;&lt; j)) &#123;</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; n; l++) &#123;</span><br><span class="line">            cur[l][qq] = s[l][j] - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          qq++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) f[j] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; qq; l++) &#123;</span><br><span class="line">          f[j] &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">          f[j] |= (cur[j][l] == <span class="number">1</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      vis.clear();</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) vis[f[j]]++;</span><br><span class="line">      <span class="keyword">int</span> tot = n, tmp = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> p : vis) &#123;</span><br><span class="line">        tmp += (n - p.second) * p.second;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(tmp / <span class="number">2</span> &gt;= k) ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++_, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://bestcoder.hdu.edu.cn/contests/contest_showproblem.php?cid=820&amp;amp;pid=1001&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018百度之星" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E7%99%BE%E5%BA%A6%E4%B9%8B%E6%98%9F/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="枚举" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1016C] Vasya And The Mushrooms (DP)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/04/Codeforces1016C-Vasya-And-The-Mushrooms-DP/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/04/Codeforces1016C-Vasya-And-The-Mushrooms-DP/</id>
    <published>2018-08-04T13:58:14.000Z</published>
    <updated>2018-08-04T16:39:23.664Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1016/problem/C" target="_blank" rel="noopener">http://codeforces.com/contest/1016/problem/C</a></p><p><strong>给出一个$2×n$的矩阵，一个人从$(1,1)$出发，每一个格子只能走一次，走完这$2n$个格子后使得带权和最大，问最大的带权和是多少。</strong></p><a id="more"></a><p>容易发现走到最后一个格子之前路径可以分为两个部分：前半部分蛇皮走位，后半部分一个大回环。</p><p>但是决定走大回环的位置也是分奇偶的，于是我们预处理出每一行的前缀和$sa_i$和$sb_i$，以及两组后缀和，分别为拐弯前（$da_i、db_i$）和拐弯后（$ia_i、ib_i$）。</p><p>然后我们可以枚举拐弯的结点，并同时记录前面走蛇皮位的结果，同时讨论目前在下还是在上，决定大回环值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300003</span>;</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL a[maxn], b[maxn];</span><br><span class="line">LL sa[maxn], sb[maxn], ia[maxn], ib[maxn], da[maxn], db[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">    <span class="built_in">memset</span>(sa, <span class="number">0</span>, <span class="keyword">sizeof</span>(sa));</span><br><span class="line">    <span class="built_in">memset</span>(sb, <span class="number">0</span>, <span class="keyword">sizeof</span>(sb));</span><br><span class="line">    <span class="built_in">memset</span>(ia, <span class="number">0</span>, <span class="keyword">sizeof</span>(ia));</span><br><span class="line">    <span class="built_in">memset</span>(ib, <span class="number">0</span>, <span class="keyword">sizeof</span>(ib));</span><br><span class="line">    <span class="built_in">memset</span>(da, <span class="number">0</span>, <span class="keyword">sizeof</span>(da));</span><br><span class="line">    <span class="built_in">memset</span>(db, <span class="number">0</span>, <span class="keyword">sizeof</span>(db));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      sa[i] = sa[i+<span class="number">1</span>] + a[i];</span><br><span class="line">      sb[i] = sb[i+<span class="number">1</span>] + b[i];</span><br><span class="line">      ia[i] = ia[i+<span class="number">1</span>] + a[i] * (LL)(n-i<span class="number">-1L</span>L);</span><br><span class="line">      ib[i] = ib[i+<span class="number">1</span>] + b[i] * (LL)(n-i<span class="number">-1L</span>L);</span><br><span class="line">      da[i] = da[i+<span class="number">1</span>] + a[i] * (LL)i;</span><br><span class="line">      db[i] = db[i+<span class="number">1</span>] + b[i] * (LL)i;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ret = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        LL tr = db[i] + sb[i] * (<span class="number">2L</span>L*i - i);</span><br><span class="line">        tr += ia[i] + sa[i] * (<span class="number">2L</span>L*i + n - i);</span><br><span class="line">        ret = max(ret, tmp+tr);</span><br><span class="line">        tmp += (<span class="number">2L</span>L*i*b[i]);</span><br><span class="line">        tmp += (<span class="number">2L</span>L*i+<span class="number">1L</span>L)*a[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        LL tr = da[i] + sa[i] * (<span class="number">2L</span>L*i - i);</span><br><span class="line">        tr += ib[i] + sb[i] * (<span class="number">2L</span>L*i + n - i);</span><br><span class="line">        ret = max(ret, tmp+tr);</span><br><span class="line">        tmp += (<span class="number">2L</span>L*i*a[i]);</span><br><span class="line">        tmp += (<span class="number">2L</span>L*i+<span class="number">1L</span>L)*b[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1016/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1016/problem/C&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给出一个$2×n$的矩阵，一个人从$(1,1)$出发，每一个格子只能走一次，走完这$2n$个格子后使得带权和最大，问最大的带权和是多少。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/Codeforces/"/>
    
    
      <category term="DP" scheme="https://vincentxwd.github.io/blog/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1016D] Vasya And The Matrix (构造)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/04/Codeforces1016D-Vasya-And-The-Matrix-%E6%9E%84%E9%80%A0/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/04/Codeforces1016D-Vasya-And-The-Matrix-构造/</id>
    <published>2018-08-04T12:59:16.000Z</published>
    <updated>2018-08-04T13:57:53.756Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1016/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/1016/problem/D</a></p><p><strong>给出一个矩阵的行和列的大小$n，m$以及每一行和每一列的异或和$a_i$和$b_i$，让你构造这样一个矩阵。</strong></p><a id="more"></a><p>考虑将每一行的异或和放到第一列上，每一列的异或和放到第一行上。问题在$(1,1)$处，这里可以用$a_2、a_3、…、a_n$。接下来判断这个数和第一行的异或和是否为$b_1$即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn], ret;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    ret = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(G, <span class="number">0</span>, <span class="keyword">sizeof</span>(G));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">      ret ^= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">      ret ^= b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ret != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    G[<span class="number">1</span>][<span class="number">1</span>] = b[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      G[<span class="number">1</span>][<span class="number">1</span>] ^= a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      G[<span class="number">1</span>][i] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      G[i][<span class="number">1</span>] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      p ^= G[<span class="number">1</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != a[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, G[i][j], <span class="string">" \n"</span>[j==m]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1016/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1016/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给出一个矩阵的行和列的大小$n，m$以及每一行和每一列的异或和$a_i$和$b_i$，让你构造这样一个矩阵。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/Codeforces/"/>
    
    
      <category term="构造" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>2018牛客多校05 E room (费用流)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/03/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A105-E-room-%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/03/2018牛客多校05-E-room-费用流/</id>
    <published>2018-08-03T05:47:19.000Z</published>
    <updated>2018-08-03T05:52:42.451Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/143/E" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/143/E</a></p><p><strong>n个宿舍，每个宿舍住4个人，给两年的住宿情况，问最少调换多少人，能从前一年的住宿状态调换到后一年的住宿状态（宿舍顺序不影响）。</strong></p><a id="more"></a><p>比赛的时候没时间看，补题的时候发现是一道挺好想的费用流问题。</p><p>考虑宿舍整体，当一个宿舍变为另一个宿舍的时候，我们的代价是这两个宿舍中不同人的个数，按照这条规律，我们可以建图：</p><p>单独建超级源和超级汇，之后按照不同年份和不同宿舍建点，不同年的每个宿舍之间连接一条边，容量为1，费用为不同人的个数。源点连接前一年的点，容量为1费用为0，后一年的点连汇点，容量为1费用为0。这样跑一下最小费用最大流就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> u, v, next;</span><br><span class="line">  LL c, w;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">210</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">40100</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">0x3f3f3f3f</span>LL;</span><br><span class="line"><span class="keyword">const</span> LL inf = (<span class="number">1L</span>L&lt;&lt;<span class="number">55</span>);</span><br><span class="line"><span class="keyword">int</span> tot, head[maxn];</span><br><span class="line">LL dist[maxn];</span><br><span class="line">LL cost, flow;</span><br><span class="line">Node e[maxm];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="keyword">bool</span> visit[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="keyword">int</span> S, T, N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  S = T = N = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span>(head));</span><br><span class="line">  tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, LL c, LL w)</span> </span>&#123;</span><br><span class="line">  e[tot].u = u; e[tot].v = v; e[tot].c = c; e[tot].w = w; e[tot].next = head[u]; head[u] = tot++;</span><br><span class="line">  e[tot].u = v; e[tot].v = u; e[tot].c = <span class="number">0</span>; e[tot].w = -w; e[tot].next = head[v]; head[v] = tot++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    dist[i] = inf;</span><br><span class="line">    visit[i] = <span class="number">0</span>;</span><br><span class="line">    pre[i] = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(!Q.empty()) Q.pop();</span><br><span class="line">  Q.push(s);</span><br><span class="line">  visit[s] = <span class="literal">true</span>;</span><br><span class="line">  dist[s] = <span class="number">0</span>;</span><br><span class="line">  pre[s] = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">while</span>(!Q.empty()) &#123;</span><br><span class="line">    <span class="keyword">int</span> u = Q.front();</span><br><span class="line">    visit[u] = <span class="literal">false</span>;</span><br><span class="line">    Q.pop();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = head[u]; j != <span class="number">-1</span>; j = e[j].next) &#123;</span><br><span class="line">      <span class="keyword">if</span>(e[j].c &gt; <span class="number">0</span> &amp;&amp; dist[u] + e[j].w &lt; dist[e[j].v]) &#123;</span><br><span class="line">        dist[e[j].v] = dist[u] + e[j].w;</span><br><span class="line">        pre[e[j].v] = j;</span><br><span class="line">        <span class="keyword">if</span>(!visit[e[j].v]) &#123;</span><br><span class="line">          Q.push(e[j].v);</span><br><span class="line">          visit[e[j].v] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// return dist[t] &lt; 0; // 求可行流</span></span><br><span class="line">  <span class="keyword">if</span>(dist[t] == inf) <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">// 求最小费用流</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">ChangeFlow</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">  LL det = mod;</span><br><span class="line">  <span class="keyword">int</span> u = t;</span><br><span class="line">  <span class="keyword">while</span>(~pre[u]) &#123;</span><br><span class="line">    u = pre[u];</span><br><span class="line">    det = min(det, e[u].c);</span><br><span class="line">    u = e[u].u;</span><br><span class="line">  &#125;</span><br><span class="line">  u = t;</span><br><span class="line">  <span class="keyword">while</span>(~pre[u]) &#123;</span><br><span class="line">    u = pre[u];</span><br><span class="line">    e[u].c -= det;</span><br><span class="line">    e[u ^ <span class="number">1</span>].c += det;</span><br><span class="line">    u = e[u].u;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> det;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">MinCostFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  LL mincost, maxflow;</span><br><span class="line">  mincost = maxflow = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(spfa(s, t, n)) &#123;</span><br><span class="line">    LL det = ChangeFlow(t);</span><br><span class="line">    mincost += det * dist[t];</span><br><span class="line">    maxflow += det;</span><br><span class="line">  &#125;</span><br><span class="line">  cost = mincost;</span><br><span class="line">  flow = maxflow;</span><br><span class="line">  <span class="keyword">return</span> mincost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> x;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">    init();T = <span class="number">2</span> * n + <span class="number">1</span>; N = T + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">int</span> tot = n * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        vis[i][x][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">4</span>; j++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">        vis[i][x][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      adde(S, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">      adde(i+n, T, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> diff = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= tot; k++) &#123;</span><br><span class="line">          <span class="keyword">if</span>(vis[i][k][<span class="number">0</span>] == vis[j][k][<span class="number">1</span>] &amp;&amp; vis[i][k][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            diff++;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        adde(i, j+n, <span class="number">1</span>, <span class="number">4</span>-diff);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; MinCostFlow(S, T, N) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/143/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/143/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n个宿舍，每个宿舍住4个人，给两年的住宿情况，问最少调换多少人，能从前一年的住宿状态调换到后一年的住宿状态（宿舍顺序不影响）。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="2018牛客多校" scheme="https://vincentxwd.github.io/blog/categories/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="费用流" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6301] 18多校01 Distinct Values (莫队算法, 构造)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/03/HDOJ6301-Distinct-Values-%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/03/HDOJ6301-Distinct-Values-莫队算法/</id>
    <published>2018-08-03T04:22:10.000Z</published>
    <updated>2018-08-03T04:32:29.230Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6301" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6301</a></p><p><strong>给出m个区间，要求构造一个指定区间内的数字不能相等，并且数字在$[1,n]$之间，求构造的字典序最小的方案。</strong> </p><a id="more"></a><p>首先给区间排个序，按照左端点小、右端点小的规则排。接下来维护两个指针L、R，从左到右往里塞，然后用类似莫队的更新方法去维护数列，同时维护目前可用的数字。 整体复杂度为$O(n+m)$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Node = struct &#123;</span><br><span class="line">  <span class="keyword">int</span> l, r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[maxn];</span><br><span class="line">Node p[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    st.clear();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;p[i].l,&amp;p[i].r);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p+<span class="number">1</span>, p+m+<span class="number">1</span>, [](Node a, Node b) &#123;</span><br><span class="line">      <span class="keyword">return</span> a.l == b.l ? a.r &lt; b.r : a.l &lt; b.l;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      st.insert(i);</span><br><span class="line">      a[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L = p[<span class="number">1</span>].l, R = p[<span class="number">1</span>].r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = L; i &lt;= R; i++) &#123;</span><br><span class="line">      a[i] = *st.begin();</span><br><span class="line">      st.erase(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= m; i++) &#123;</span><br><span class="line">      <span class="keyword">while</span>(L &lt; p[i].l) &#123;</span><br><span class="line">        st.insert(a[L++]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span>(R &lt; p[i].r) &#123;</span><br><span class="line">        <span class="keyword">if</span>(R + <span class="number">1</span> &lt; p[i].l) R++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          a[++R] = *st.begin();</span><br><span class="line">          st.erase(a[R]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[i], <span class="string">" \n"</span>[i==n]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6301&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给出m个区间，要求构造一个指定区间内的数字不能相等，并且数字在$[1,n]$之间，求构造的字典序最小的方案。&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="莫队算法" scheme="https://vincentxwd.github.io/blog/tags/%E8%8E%AB%E9%98%9F%E7%AE%97%E6%B3%95/"/>
    
      <category term="构造" scheme="https://vincentxwd.github.io/blog/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>[HDOJ6299] 18多校01 Balanced Sequence (贪心)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/03/HDOJ6299-Balanced-Sequence-%E8%B4%AA%E5%BF%83/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/03/HDOJ6299-Balanced-Sequence-贪心/</id>
    <published>2018-08-03T04:18:41.000Z</published>
    <updated>2018-08-03T04:23:41.802Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6299" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6299</a></p><p><strong>n个括号串，问如何排列这n个串，使得连起来后()匹配的对数最多（不用连续）。</strong></p><a id="more"></a><p>首先串内匹配并记录答案。之后尽可能让左括号多的在左边，右括号多的在右边排序，再贪心扫一遍，只维护左括号的个数，同时根据下一个串右括号的个数统计答案。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Node = struct &#123;</span><br><span class="line">  <span class="keyword">int</span> l, r, v;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; p;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">  <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    p.resize(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">      <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; s[j]; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j] == <span class="string">'('</span>) &#123;</span><br><span class="line">          l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(l != <span class="number">0</span>) l--, tot++;</span><br><span class="line">          <span class="keyword">else</span> r++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      p[i].l = l, p[i].r = r, p[i].v = tot;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p.begin(), p.end(), [](Node a, Node b) &#123;</span><br><span class="line">      <span class="keyword">if</span>(a.l &gt; a.r) &#123;</span><br><span class="line">        <span class="keyword">return</span> b.l &gt; b.r ? a.r &lt; b.r : <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> b.l &lt;= b.r ? a.l &gt; b.l : <span class="literal">false</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>, ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      ret += p[i].v;</span><br><span class="line">      l += p[i].l; r += p[i+<span class="number">1</span>].r;</span><br><span class="line">      ret += min(l, r);</span><br><span class="line">      l -= min(l, r); r = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ret += p[n<span class="number">-1</span>].v;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret * <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6299&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://acm.hdu.edu.cn/showproblem.php?pid=6299&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n个括号串，问如何排列这n个串，使得连起来后()匹配的对数最多（不用连续）。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HDOJ" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/"/>
    
      <category term="2018杭电多校" scheme="https://vincentxwd.github.io/blog/categories/HDOJ/2018%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>[Hackerrank] Array Partition (并查集, 数学)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/03/Hackerrank-Array-Partition-%E5%B9%B6%E6%9F%A5%E9%9B%86-%E6%95%B0%E5%AD%A6/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/03/Hackerrank-Array-Partition-并查集-数学/</id>
    <published>2018-08-02T16:52:18.000Z</published>
    <updated>2018-08-02T17:01:59.160Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.hackerrank.com/contests/hourrank-29/challenges/array-partition" target="_blank" rel="noopener">https://www.hackerrank.com/contests/hourrank-29/challenges/array-partition</a></p><p><strong>给n个数，让你将这n个数拆分成两个集合，使得两个集合分别乘积互质，求拆分方案数。</strong></p><a id="more"></a><p>第一次打Hackerrank，一个小时三道题还是很刺激的。这道题比赛的时候没调出来，只拿了部分分，有点遗憾啊~）ps：衣服还是很难拿的，top10 才有，这场出现了tourist等众神牛，这种场拿衣服还是不想了。</p><p>根据题目的要求，显然拥有相同因数的数字必须呆在同一个集合（1除外，这是个trick，后面会说），考虑用一个方法，将所有拥有至少一个公共因数的数字划为同一个集合，然后再对所有不连通的集合进行计数，会发现：当有$n$个集合的时候，我们的划分方案数为$2^{n}-2$。</p><p>很显然可以用并查集维护每一个数的因数的连通情况，因此我们在枚举每一个数的因数的同时，将因数和这个数并到一起就可以了。这里需要特别注意的是，每一个1都可以分到一个单独的集合里，因此计数的时候需要单独考虑~</p><p>整体复杂度为$O(n\sqrt{n})$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000010</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x == pre[x] ? x : pre[x] = find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unite</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  x = find(x); y = find(y);</span><br><span class="line">  <span class="keyword">if</span>(x != y) &#123;</span><br><span class="line">    pre[x] = y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> nn = <span class="number">1</span> &lt;&lt; a.size();</span><br><span class="line">  vis.clear();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) pre[i] = i;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(a[i] == <span class="number">1</span>) cnt++;</span><br><span class="line">    vis.insert(a[i]);</span><br><span class="line">    <span class="keyword">int</span> tmp = a[i];</span><br><span class="line">    <span class="keyword">int</span> aa = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(a[i]) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= aa; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(tmp % j == <span class="number">0</span>) &#123;</span><br><span class="line">        unite(a[i], j);</span><br><span class="line">        vis.insert(j);</span><br><span class="line">        <span class="keyword">while</span>(tmp % j == <span class="number">0</span>) tmp /= j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tmp != <span class="number">1</span>) unite(a[i], tmp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; block;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxn; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(vis.find(i) != vis.end()) &#123;</span><br><span class="line">      block[find(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(block.size() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  LL ret = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; block.size(); i++) &#123;</span><br><span class="line">    ret *= <span class="number">2</span>;</span><br><span class="line">    ret %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    ret *= <span class="number">2</span>;</span><br><span class="line">    ret %= mod;</span><br><span class="line">  &#125;</span><br><span class="line">  ret -= <span class="number">2</span>; ret += mod; ret %= mod;</span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.hackerrank.com/contests/hourrank-29/challenges/array-partition&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.hackerrank.com/contests/hourrank-29/challenges/array-partition&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给n个数，让你将这n个数拆分成两个集合，使得两个集合分别乘积互质，求拆分方案数。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hackerrank" scheme="https://vincentxwd.github.io/blog/categories/Hackerrank/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="并查集" scheme="https://vincentxwd.github.io/blog/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>2018牛客多校05 J plan(数学，规律)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/02/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A105-J-plan-%E6%95%B0%E5%AD%A6%EF%BC%8C%E8%A7%84%E5%BE%8B/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/02/2018牛客多校05-J-plan-数学，规律/</id>
    <published>2018-08-02T14:13:21.000Z</published>
    <updated>2018-08-02T14:21:24.374Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/143/J" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/143/J</a></p><p><strong>n个人住宾馆，双人间价格为p2，三人间价格为p3，如何安排，使总花费最少。</strong></p><a id="more"></a><p>列方程，枚举最近的6个结果即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL n, a, b;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;a,&amp;b)) &#123;</span><br><span class="line">    LL ret = <span class="number">1e18</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i = <span class="number">0</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">      ret = min(ret, (n+<span class="number">1</span>-i)/<span class="number">2</span>*a+(i+<span class="number">2</span>)/<span class="number">3</span>*b);</span><br><span class="line">      ret = min(ret, (n+<span class="number">2</span>-i)/<span class="number">3</span>*b+(i+<span class="number">1</span>)/<span class="number">2</span>*a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/143/J&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/143/J&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n个人住宾馆，双人间价格为p2，三人间价格为p3，如何安排，使总花费最少。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="2018牛客多校" scheme="https://vincentxwd.github.io/blog/categories/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>2018牛客多校05 G max(数学，规律)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/02/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A105-G-max-%E6%95%B0%E5%AD%A6%EF%BC%8C%E8%A7%84%E5%BE%8B/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/02/2018牛客多校05-G-max-数学，规律/</id>
    <published>2018-08-02T14:12:51.000Z</published>
    <updated>2018-08-02T14:21:26.030Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/143/G" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/143/G</a></p><p><strong>给定c、n，求两个整数a、b，使得$gcd(a,b)=c, 1≤a,b≤n$</strong></p><a id="more"></a><p>很容易发现只需要选择最接近n的c的倍数数、以及次接近n的c的倍数乘积就是最大的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line">LL c, n;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;c,&amp;n)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(c &gt; n) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n*(n<span class="number">-1</span>));</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == c) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, c * c);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n % c == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n*(n-c));</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      LL t = n / c * c;</span><br><span class="line">      <span class="keyword">if</span>(t == c) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t*t);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, t*(t-c));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/143/G&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/143/G&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给定c、n，求两个整数a、b，使得$gcd(a,b)=c, 1≤a,b≤n$&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="2018牛客多校" scheme="https://vincentxwd.github.io/blog/categories/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="数学" scheme="https://vincentxwd.github.io/blog/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>2018牛客多校05 A gpa (01分数规划)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/02/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A105-A-gpa-01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/02/2018牛客多校05-A-gpa-01分数规划/</id>
    <published>2018-08-02T13:43:55.000Z</published>
    <updated>2018-08-02T14:25:09.901Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.nowcoder.com/acm/contest/143/A" target="_blank" rel="noopener">https://www.nowcoder.com/acm/contest/143/A</a></p><p><strong>一个人有n个成绩，然后现在他可以删掉其中至多k个，使得目标方程$\frac{\sum[s[i]c[i]}{\sum s[i]}$的值最大，问这个值可以是多少。</strong></p><a id="more"></a><p>这题和<a href="https://www.cnblogs.com/kirai/p/5812548.html" target="_blank" rel="noopener">POJ2976</a>是很类似的，是用01分数规划可以解决的问题。01分数规划可以看做是一种思想，可以用二分查找实现。针对这一道题，我们希望让目标方程尽可能大，于是可以假设：<br>$$<br>\frac{\sum[s[i]c[i]}{\sum s[i]} \geq L<br>$$<br>移项后得：<br>$$<br>\sum{s_ic_i-L×s_i}\geq0<br>$$<br>于是我们可以二分$L$，对该式中的$s_ic_i-L×s_i$进行计算并排序，删掉最小的k个后，查看是否满足题意。当收敛时，即$L$近似为式子的最大值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101000</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, m;</span><br><span class="line"><span class="keyword">int</span> s[maxn], c[maxn];</span><br><span class="line"><span class="keyword">double</span> d[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">double</span> L)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) d[i] = (<span class="keyword">double</span>)(s[i] * c[i]) - L * (<span class="keyword">double</span>)s[i];</span><br><span class="line">  sort(d+<span class="number">1</span>, d+n+<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">double</span> tot = <span class="number">.0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = k+<span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    tot += d[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tot &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c[i]);</span><br><span class="line">    <span class="keyword">double</span> lo = <span class="number">.0</span>, hi = <span class="number">1e3</span>;</span><br><span class="line">    <span class="keyword">double</span> ret = <span class="number">.0</span>;</span><br><span class="line">    <span class="keyword">while</span>(hi - lo &gt; eps) &#123;</span><br><span class="line">      <span class="keyword">double</span> mid = (lo + hi) / <span class="number">2.0</span>;</span><br><span class="line">      <span class="keyword">if</span>(ok(mid)) lo = mid;</span><br><span class="line">      <span class="keyword">else</span> hi = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.11f\n"</span>, lo);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;https://www.nowcoder.com/acm/contest/143/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.nowcoder.com/acm/contest/143/A&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个人有n个成绩，然后现在他可以删掉其中至多k个，使得目标方程$\frac{\sum[s[i]c[i]}{\sum s[i]}$的值最大，问这个值可以是多少。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="2018牛客多校" scheme="https://vincentxwd.github.io/blog/categories/2018%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="二分" scheme="https://vincentxwd.github.io/blog/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="01分数规划" scheme="https://vincentxwd.github.io/blog/tags/01%E5%88%86%E6%95%B0%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1006E] Military Problem(DFS)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/01/Codeforces1006E-Military-Problem-DFS/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/01/Codeforces1006E-Military-Problem-DFS/</id>
    <published>2018-08-01T15:40:55.000Z</published>
    <updated>2018-08-01T15:49:20.605Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1006/problem/E" target="_blank" rel="noopener">http://codeforces.com/contest/1006/problem/E</a></p><p><strong>给一棵$n$个节点的树和$q$次询问，每次询问两个数$u、k$，表示第u个节点的第k个前序遍历的结果是谁。</strong></p><a id="more"></a><p>这么水的题竟然放在了E，可能这就是div 3吧…</p><p>dfs一遍，维护出每个节点$i$的前序遍历的次序$ret_i$，以及该节点的子树中共计多少个节点$sz_i$，可以利用$ret_i$维护出第$j$号遍历的节点是$id_i$。当我们要求的某节点开始往后数$k$个数不存在时，输出-1；否则我们的答案就是$ret[id[u]+k-1]$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200100</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, tot;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> ret[maxn], sz[maxn], id[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">  ret[++tot] = u;</span><br><span class="line">  <span class="keyword">int</span> son = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;v = G[u][i];</span><br><span class="line">    <span class="keyword">if</span>(v == p) <span class="keyword">continue</span>;</span><br><span class="line">    son += dfs(v, u);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sz[u] = son;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">int</span> u, k;</span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q)) &#123;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ret, <span class="number">-1</span>, <span class="keyword">sizeof</span>(ret));</span><br><span class="line">    <span class="built_in">memset</span>(sz, <span class="number">0</span>, <span class="keyword">sizeof</span>(sz));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;u);</span><br><span class="line">      G[i].push_back(u);</span><br><span class="line">      G[u].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    sz[<span class="number">1</span>] = dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) id[ret[i]] = i;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;k);</span><br><span class="line">      <span class="keyword">if</span>(k - <span class="number">1</span> &gt;= sz[u]) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret[id[u]+k<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1006/problem/E&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1006/problem/E&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给一棵$n$个节点的树和$q$次询问，每次询问两个数$u、k$，表示第u个节点的第k个前序遍历的结果是谁。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/Codeforces/"/>
    
    
      <category term="DFS" scheme="https://vincentxwd.github.io/blog/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1006D] Two Strings Swaps(规律)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/01/Codeforces1006D-Two-Strings-Swaps-%E8%A7%84%E5%BE%8B/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/01/Codeforces1006D-Two-Strings-Swaps-规律/</id>
    <published>2018-08-01T15:06:48.000Z</published>
    <updated>2018-08-01T15:16:43.209Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<a href="http://codeforces.com/contest/1006/problem/D" target="_blank" rel="noopener">http://codeforces.com/contest/1006/problem/D</a></p><p><strong>给你两个字符串，定义三种操作。要求你事先给其中一个字符串替换某几个字符，然后再经过任一种上述操作变成两个一样的字符串，问预处理替换的字符最少要几个</strong></p><a id="more"></a> <p>一个很容易发现的规律就是每次处理的时候仅需要关心操作涉及的四个字符，然后再分类讨论一下就行了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100100</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t);</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a;</span><br><span class="line">      a[s[i]]++; a[s[n-i<span class="number">-1</span>]]++;</span><br><span class="line">      a[t[i]]++; a[t[n-i<span class="number">-1</span>]]++;</span><br><span class="line">      <span class="keyword">if</span>(a.size() == <span class="number">4</span>) ret += <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a.size() == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == s[n-i<span class="number">-1</span>]) ret += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> ret++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(a.size() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[s[i]] != <span class="number">2</span>) ret++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(s[n/<span class="number">2</span>] != t[n/<span class="number">2</span>]) ret++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;a href=&quot;http://codeforces.com/contest/1006/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1006/problem/D&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你两个字符串，定义三种操作。要求你事先给其中一个字符串替换某几个字符，然后再经过任一种上述操作变成两个一样的字符串，问预处理替换的字符最少要几个&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/Codeforces/"/>
    
    
      <category term="规律" scheme="https://vincentxwd.github.io/blog/tags/%E8%A7%84%E5%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>[Codeforces1015E(1,2)] Stars Drawing (贪心,暴力)</title>
    <link href="https://vincentxwd.github.io/blog/2018/08/01/Codeforces1015E-1-2-Stars-Drawing-%E8%B4%AA%E5%BF%83-%E6%9A%B4%E5%8A%9B/"/>
    <id>https://vincentxwd.github.io/blog/2018/08/01/Codeforces1015E-1-2-Stars-Drawing-贪心-暴力/</id>
    <published>2018-08-01T07:15:25.000Z</published>
    <updated>2018-08-01T15:11:36.401Z</updated>
    
    <content type="html"><![CDATA[<p>链接：</p><p><a href="http://codeforces.com/contest/1015/problem/E1" target="_blank" rel="noopener">http://codeforces.com/contest/1015/problem/E1</a></p><p><a href="http://codeforces.com/contest/1015/problem/E2" target="_blank" rel="noopener">http://codeforces.com/contest/1015/problem/E2</a></p><p><strong>给你一个$n×m$的矩阵，里面的*组成十字（至少要5个构成十字，比如5个的十字大小为1，一次类推），问这里面的*是否能都组成十字。并输出一个方案。</strong></p><a id="more"></a> <p>这题暴力，贪心地让每一个*向四个方向延拓尽可能长的范围，并打好标记，存下所有可能的十字，看看这些标记里有没有是*但是为标记的就可以了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> maxn = <span class="number">1010</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">using</span> Node = struct &#123;</span><br><span class="line">  <span class="keyword">int</span> x, y, v;  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">char</span> G[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; p, ret;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gao</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">bool</span> yes = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">while</span>(flag) &#123;</span><br><span class="line">    flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> tx = x + dx[i] * tot;</span><br><span class="line">      <span class="keyword">int</span> ty = y + dy[i] * tot;</span><br><span class="line">      <span class="keyword">if</span>(ok(tx, ty) &amp;&amp; G[tx][ty] == <span class="string">'*'</span>) cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cnt != <span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> tx = x + dx[i] * tot;</span><br><span class="line">      <span class="keyword">int</span> ty = y + dy[i] * tot;</span><br><span class="line">      vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">    yes = <span class="literal">true</span>;</span><br><span class="line">    tot++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(yes) &#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    ret.push_back(&#123;x+<span class="number">1</span>, y+<span class="number">1</span>, tot<span class="number">-1</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// freopen("in", "r", stdin);</span></span><br><span class="line">  <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)) &#123;</span><br><span class="line">    p.clear(); ret.clear();</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i][j] == <span class="string">'*'</span>) p.push_back(&#123;i, j, <span class="number">0</span>&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p.size() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : p) gao(t.x, t.y);</span><br><span class="line">    <span class="keyword">if</span>(ret.size() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i][j] &amp;&amp; G[i][j] == <span class="string">'*'</span>) &#123;</span><br><span class="line">          flag = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ret.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> t : ret) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, t.x, t.y, t.v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;链接：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1015/problem/E1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1015/problem/E1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://codeforces.com/contest/1015/problem/E2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://codeforces.com/contest/1015/problem/E2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给你一个$n×m$的矩阵，里面的*组成十字（至少要5个构成十字，比如5个的十字大小为1，一次类推），问这里面的*是否能都组成十字。并输出一个方案。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Codeforces" scheme="https://vincentxwd.github.io/blog/categories/Codeforces/"/>
    
    
      <category term="暴力" scheme="https://vincentxwd.github.io/blog/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="贪心" scheme="https://vincentxwd.github.io/blog/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
</feed>
